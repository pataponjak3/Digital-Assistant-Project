DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c7e488ad-7609-4605-997b-319256e0e992', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': '5-day forecast for 40.7128, -74.0060.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE154BB0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1548B0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:29:22 GMT'), (b'x-ratelimit-remaining-tokens', b'32793'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekQxc-66dFFu-984adeb99fa637bf'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adeb99fa637bf-IAD'), (b'etag', b'W/"363-Yo6iKoPyE4NrIUWRqrk/DEp3Pig"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:29:22.723Z'), (b'x-api-call-start', b'2025-09-25T13:29:22.249Z'), (b'x-api-received', b'2025-09-25T13:29:22.237Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 229645111d244444bdf50dba19c1f2c8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'p6TBXPPrVu4YwK-mIUlFEIiZ2PwyVLYtIYPceVveLd1mx9TG_aZvdw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:29:22 GMT', 'x-ratelimit-remaining-tokens': '32793', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekQxc-66dFFu-984adeb99fa637bf', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adeb99fa637bf-IAD', 'etag': 'W/"363-Yo6iKoPyE4NrIUWRqrk/DEp3Pig"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:29:22.723Z', 'x-api-call-start': '2025-09-25T13:29:22.249Z', 'x-api-received': '2025-09-25T13:29:22.237Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 229645111d244444bdf50dba19c1f2c8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'p6TBXPPrVu4YwK-mIUlFEIiZ2PwyVLYtIYPceVveLd1mx9TG_aZvdw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekQxc-66dFFu-984adeb99fa637bf
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation '5-day forecast for 40.7128, -74.0060.' took 10.76s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': 40.7128, 'lon': -74.006, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a680049c-eed8-4496-9719-c5a8f4735784', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Next 5 days near -33.8688, 151.2093?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE156A40>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1564A0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:29:28 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekSiv-66dFFu-984adeddf9283126'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adeddf9283126-IAD'), (b'etag', b'W/"366-mW+fbR3k+zIpsEfstFv2+kYjKjY"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:29:28.767Z'), (b'x-api-call-start', b'2025-09-25T13:29:28.186Z'), (b'x-api-received', b'2025-09-25T13:29:28.171Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'TV9hDwj5oZGZb4ri7jUOSx0dPdLC-HtFVcMz_Kr2ZORCazpEsp5SCw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:29:28 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekSiv-66dFFu-984adeddf9283126', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adeddf9283126-IAD', 'etag': 'W/"366-mW+fbR3k+zIpsEfstFv2+kYjKjY"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:29:28.767Z', 'x-api-call-start': '2025-09-25T13:29:28.186Z', 'x-api-received': '2025-09-25T13:29:28.171Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'TV9hDwj5oZGZb4ri7jUOSx0dPdLC-HtFVcMz_Kr2ZORCazpEsp5SCw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekSiv-66dFFu-984adeddf9283126
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Next 5 days near -33.8688, 151.2093?' took 1.06s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': -33.8688, 'lon': 151.2093, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-18a1732f-bf2e-471e-92c6-bf17b898ec68', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Forecast (5d) at -23.5505, -46.6333.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:29:34 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekUUd-66dFFu-984adf038a8e99fb'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adf038a8e99fb-IAD'), (b'etag', b'W/"366-0NwiIqIjj/SY+RR2VJEkj2/ls88"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:29:34.631Z'), (b'x-api-call-start', b'2025-09-25T13:29:34.083Z'), (b'x-api-received', b'2025-09-25T13:29:34.071Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'1Vt9IoV90e5k_Dllifm5gzfX417-Q6t0BXk6uZoU5Q-Y-sfjijr6pg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:29:34 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekUUd-66dFFu-984adf038a8e99fb', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adf038a8e99fb-IAD', 'etag': 'W/"366-0NwiIqIjj/SY+RR2VJEkj2/ls88"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:29:34.631Z', 'x-api-call-start': '2025-09-25T13:29:34.083Z', 'x-api-received': '2025-09-25T13:29:34.071Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '1Vt9IoV90e5k_Dllifm5gzfX417-Q6t0BXk6uZoU5Q-Y-sfjijr6pg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekUUd-66dFFu-984adf038a8e99fb
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Forecast (5d) at -23.5505, -46.6333.' took 0.83s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': -23.5505, 'lon': -46.6333, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1773c706-7b7b-4759-98c0-0b6e3deada65', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Show me 5-day outlook for 30.0444, 31.2357.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1568C0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE155DB0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:29:40 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekWGB-66dFFu-984adf285d2505aa'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adf285d2505aa-IAD'), (b'etag', b'W/"364-Ny9NtNI/OSNmamBggJR6w7iaqIY"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:29:40.702Z'), (b'x-api-call-start', b'2025-09-25T13:29:40.087Z'), (b'x-api-received', b'2025-09-25T13:29:40.077Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'c9R59MEH4pjkoOTP9XOM8XrL9vlfOh6OncIM7tc73NjcJG1JlcHEIg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:29:40 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekWGB-66dFFu-984adf285d2505aa', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adf285d2505aa-IAD', 'etag': 'W/"364-Ny9NtNI/OSNmamBggJR6w7iaqIY"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:29:40.702Z', 'x-api-call-start': '2025-09-25T13:29:40.087Z', 'x-api-received': '2025-09-25T13:29:40.077Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'c9R59MEH4pjkoOTP9XOM8XrL9vlfOh6OncIM7tc73NjcJG1JlcHEIg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekWGB-66dFFu-984adf285d2505aa
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Show me 5-day outlook for 30.0444, 31.2357.' took 1.05s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': 30.0444, 'lon': 31.2357, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f0922b50-c8a0-429e-b04f-6aa4e9e05534', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's the week ahead at 55.7558, 37.6173?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:29:46 GMT'), (b'x-ratelimit-remaining-tokens', b'32799'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekY1x-62bZhn-984adf4defbfd640'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adf4defbfd640-IAD'), (b'etag', b'W/"364-Dyj3kaiP8Kb6FmkuPKcdrC5Gu4g"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:29:46.584Z'), (b'x-api-call-start', b'2025-09-25T13:29:46.025Z'), (b'x-api-received', b'2025-09-25T13:29:45.979Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'nID269i4ce1dMGRcvqBFbXV-ZDZTTjH_ZmfriEpJWKDmq6svV3xe-A==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:29:46 GMT', 'x-ratelimit-remaining-tokens': '32799', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekY1x-62bZhn-984adf4defbfd640', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adf4defbfd640-IAD', 'etag': 'W/"364-Dyj3kaiP8Kb6FmkuPKcdrC5Gu4g"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:29:46.584Z', 'x-api-call-start': '2025-09-25T13:29:46.025Z', 'x-api-received': '2025-09-25T13:29:45.979Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'nID269i4ce1dMGRcvqBFbXV-ZDZTTjH_ZmfriEpJWKDmq6svV3xe-A=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekY1x-62bZhn-984adf4defbfd640
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'What's the week ahead at 55.7558, 37.6173?' took 0.89s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': 55.7558, 'lon': 37.6173, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e4806e17-d358-418b-b4b1-86c82c0a5ed4', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Five-day forecast around -1.2921, 36.8219.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:29:52 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekZmQ-62bZhn-984adf72bbe70649'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adf72bbe70649-IAD'), (b'etag', b'W/"364-vBPXlcL3cp6rGugmIiKbo6sAaUA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:29:52.373Z'), (b'x-api-call-start', b'2025-09-25T13:29:51.879Z'), (b'x-api-received', b'2025-09-25T13:29:51.864Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'GWfZgk1wGZLeIL0OI-l59GY3EdijYQ5t4ojpmseHL6pgofRSuB-kXQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:29:52 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekZmQ-62bZhn-984adf72bbe70649', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adf72bbe70649-IAD', 'etag': 'W/"364-vBPXlcL3cp6rGugmIiKbo6sAaUA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:29:52.373Z', 'x-api-call-start': '2025-09-25T13:29:51.879Z', 'x-api-received': '2025-09-25T13:29:51.864Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'GWfZgk1wGZLeIL0OI-l59GY3EdijYQ5t4ojpmseHL6pgofRSuB-kXQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekZmQ-62bZhn-984adf72bbe70649
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Five-day forecast around -1.2921, 36.8219.' took 0.78s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': 36.8219, 'lon': -1.2921, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-cd673b6b-c57d-4799-b15c-b5ce3ee29837', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Is it cooling later this week near 64.1466, -21.9426?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1CFE80>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1CF790>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:29:58 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekbWZ-62bZhn-984adf974f091d3d'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adf974f091d3d-IAD'), (b'etag', b'W/"365-xAdxVOhSv+6s7npTlmxFqpqOh9Y"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:29:58.315Z'), (b'x-api-call-start', b'2025-09-25T13:29:57.739Z'), (b'x-api-received', b'2025-09-25T13:29:57.731Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'F6uOm2ZhKfxo9yfGPwTf60zCc2C2rnNehzcaDpJvbf4t-QPV3cosGA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:29:58 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekbWZ-62bZhn-984adf974f091d3d', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adf974f091d3d-IAD', 'etag': 'W/"365-xAdxVOhSv+6s7npTlmxFqpqOh9Y"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:29:58.315Z', 'x-api-call-start': '2025-09-25T13:29:57.739Z', 'x-api-received': '2025-09-25T13:29:57.731Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'F6uOm2ZhKfxo9yfGPwTf60zCc2C2rnNehzcaDpJvbf4t-QPV3cosGA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekbWZ-62bZhn-984adf974f091d3d
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Is it cooling later this week near 64.1466, -21.9426?' took 0.99s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': 64.1466, 'lon': -21.9426, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-21d27dab-18bb-41f9-a315-f8c1b0674833', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Give 5-day hi/lo for -33.9249, 18.4241.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1F0EB0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1F1000>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:04 GMT'), (b'x-ratelimit-remaining-tokens', b'31139'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekdQy-3NKUce-984adfbcf92cb964'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adfbcf92cb964-IAD'), (b'etag', b'W/"364-9LN6ZM/x6qeJoORqoqoIbULnQ7E"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:04.787Z'), (b'x-api-call-start', b'2025-09-25T13:30:04.146Z'), (b'x-api-received', b'2025-09-25T13:30:04.135Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'AOWzmoaico12JUVm1Kz-BpNQCZBHHAwZDc4VsSFtMvYk9-nlM0gG5g==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:04 GMT', 'x-ratelimit-remaining-tokens': '31139', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekdQy-3NKUce-984adfbcf92cb964', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adfbcf92cb964-IAD', 'etag': 'W/"364-9LN6ZM/x6qeJoORqoqoIbULnQ7E"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:04.787Z', 'x-api-call-start': '2025-09-25T13:30:04.146Z', 'x-api-received': '2025-09-25T13:30:04.135Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'AOWzmoaico12JUVm1Kz-BpNQCZBHHAwZDc4VsSFtMvYk9-nlM0gG5g=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekdQy-3NKUce-984adfbcf92cb964
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Give 5-day hi/lo for -33.9249, 18.4241.' took 1.03s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': -33.9249, 'lon': 18.4241, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ed4f9f0e-28d6-412e-afac-7b8e3370bdf6', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Forecast next days at 35.6895, 139.6917.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1F3310>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1F2EF0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:10 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekf7j-66dFFu-984adfe32a90d64f'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984adfe32a90d64f-IAD'), (b'etag', b'W/"365-DXpDauXu3USR9z4VQAR7HWBW5/8"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:10.497Z'), (b'x-api-call-start', b'2025-09-25T13:30:09.875Z'), (b'x-api-received', b'2025-09-25T13:30:09.862Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 a1a9ff59f73590e3953b5ce6edfc8aa8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'HgPYCtJHV2I8Rrzi0R-BjjDtKxikMhqnWBNCDeq9E-64kqTRBHUX5Q==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:10 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekf7j-66dFFu-984adfe32a90d64f', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984adfe32a90d64f-IAD', 'etag': 'W/"365-DXpDauXu3USR9z4VQAR7HWBW5/8"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:10.497Z', 'x-api-call-start': '2025-09-25T13:30:09.875Z', 'x-api-received': '2025-09-25T13:30:09.862Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 a1a9ff59f73590e3953b5ce6edfc8aa8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'HgPYCtJHV2I8Rrzi0R-BjjDtKxikMhqnWBNCDeq9E-64kqTRBHUX5Q=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekf7j-66dFFu-984adfe32a90d64f
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Forecast next days at 35.6895, 139.6917.' took 1.08s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': 35.6895, 'lon': 139.6917, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e9e03385-b2c9-4291-8527-13ff8e5dce35', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Five-day for 38.7223, -9.1393 (Lisbon).'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE1F26E0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE157E50>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:16 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekh1i-3NKUce-984ae00859d5572e'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae00859d5572e-IAD'), (b'etag', b'W/"363-B1sEYlZElohDURxG2j6C5qAjxWE"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:16.770Z'), (b'x-api-call-start', b'2025-09-25T13:30:16.253Z'), (b'x-api-received', b'2025-09-25T13:30:16.242Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'KT-ngkY7ttJDsPMToo5J5gknamAOEk78-U5skVGn-vb7i9Kdpkwkcw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:16 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekh1i-3NKUce-984ae00859d5572e', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae00859d5572e-IAD', 'etag': 'W/"363-B1sEYlZElohDURxG2j6C5qAjxWE"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:16.770Z', 'x-api-call-start': '2025-09-25T13:30:16.253Z', 'x-api-received': '2025-09-25T13:30:16.242Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'KT-ngkY7ttJDsPMToo5J5gknamAOEk78-U5skVGn-vb7i9Kdpkwkcw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekh1i-3NKUce-984ae00859d5572e
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Five-day for 38.7223, -9.1393 (Lisbon).' took 0.90s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'lang': 'en', 'lat': 38.7223, 'lon': -9.1393, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a988c916-f24e-42e0-a75f-11920523a775', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': '5-day forecast 10001, US.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:22 GMT'), (b'x-ratelimit-remaining-tokens', b'30473'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekieU-62bZhn-984ae02d38f581af'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae02d38f581af-IAD'), (b'etag', b'W/"389-K3GMuGi+/GtVHSxIMy8HGvRej1E"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:22.260Z'), (b'x-api-call-start', b'2025-09-25T13:30:21.755Z'), (b'x-api-received', b'2025-09-25T13:30:21.738Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'ch8cSQPM2FBq33djJLl3QBitJxfptqaBZof8BaFAUiS-7aFxVD-69w==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:22 GMT', 'x-ratelimit-remaining-tokens': '30473', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekieU-62bZhn-984ae02d38f581af', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae02d38f581af-IAD', 'etag': 'W/"389-K3GMuGi+/GtVHSxIMy8HGvRej1E"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:22.260Z', 'x-api-call-start': '2025-09-25T13:30:21.755Z', 'x-api-received': '2025-09-25T13:30:21.738Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'ch8cSQPM2FBq33djJLl3QBitJxfptqaBZof8BaFAUiS-7aFxVD-69w=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekieU-62bZhn-984ae02d38f581af
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation '5-day forecast 10001, US.' took 0.92s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'New York', 'country_code': 'US', 'lang': 'en', 'state_code': 'NY', 'units': 'imperial'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1132f5a8-9ccb-4e22-9b92-f2b2bf0fc66b', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Forecast for 90210, US next 5 days.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE229F00>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE229AE0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:28 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekkZR-3NKUce-984ae052df3bd68b'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae052df3bd68b-IAD'), (b'etag', b'W/"36f-vnFxAdI0DxCugELrhfkEXiTYM34"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:28.760Z'), (b'x-api-call-start', b'2025-09-25T13:30:28.182Z'), (b'x-api-received', b'2025-09-25T13:30:28.172Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'0i5WvST1ijvnkeDY08e8YHBXc5bZG-9HKeeMiyI1cETiRdy6wbbZ0A==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:28 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekkZR-3NKUce-984ae052df3bd68b', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae052df3bd68b-IAD', 'etag': 'W/"36f-vnFxAdI0DxCugELrhfkEXiTYM34"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:28.760Z', 'x-api-call-start': '2025-09-25T13:30:28.182Z', 'x-api-received': '2025-09-25T13:30:28.172Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '0i5WvST1ijvnkeDY08e8YHBXc5bZG-9HKeeMiyI1cETiRdy6wbbZ0A=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekkZR-3NKUce-984ae052df3bd68b
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Forecast for 90210, US next 5 days.' took 0.96s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'country_code': 'US', 'lang': 'en', 'units': 'imperial', 'zip': '90210'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-40bf6e7d-e339-4c4e-b0ed-611006f7a56e', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Weather outlook 60614, US.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE22BC70>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE22B850>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:34 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeknF9-62bZhn-984ae0792d9d81fa'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae0792d9d81fa-IAD'), (b'etag', b'W/"359-zSe6FE1W9Wof/suZ7xOhjoLJ71k"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:34.356Z'), (b'x-api-call-start', b'2025-09-25T13:30:33.854Z'), (b'x-api-received', b'2025-09-25T13:30:33.841Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 c6ccd07e1e50408d404ed1f9dd2506ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'oC7782X5EgjQyExudpzBsySnOV-xvYu_FqFpJnYgMew0uUSSj5pw5A==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:34 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeknF9-62bZhn-984ae0792d9d81fa', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae0792d9d81fa-IAD', 'etag': 'W/"359-zSe6FE1W9Wof/suZ7xOhjoLJ71k"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:34.356Z', 'x-api-call-start': '2025-09-25T13:30:33.854Z', 'x-api-received': '2025-09-25T13:30:33.841Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 c6ccd07e1e50408d404ed1f9dd2506ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'oC7782X5EgjQyExudpzBsySnOV-xvYu_FqFpJnYgMew0uUSSj5pw5A=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeknF9-62bZhn-984ae0792d9d81fa
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Weather outlook 60614, US.' took 1.10s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'country_code': 'US', 'lang': 'en', 'zip': '60614'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ba07c7bb-84e9-4e22-b2f6-6b0cd2f07661', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': '5-day for 10115, DE.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:40 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekp8w-3NKUce-984ae09deb87d6f5'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae09deb87d6f5-IAD'), (b'etag', b'W/"36d-FwEmr8S7bUKjBnpYQo6PjEf1qrI"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:40.683Z'), (b'x-api-call-start', b'2025-09-25T13:30:40.219Z'), (b'x-api-received', b'2025-09-25T13:30:40.209Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 c6ccd07e1e50408d404ed1f9dd2506ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'ZKMC0e6_oskVKExole1nuER4WnDq6Bjg4dvN2qt9n3S0yvRR_F2uXQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:40 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekp8w-3NKUce-984ae09deb87d6f5', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae09deb87d6f5-IAD', 'etag': 'W/"36d-FwEmr8S7bUKjBnpYQo6PjEf1qrI"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:40.683Z', 'x-api-call-start': '2025-09-25T13:30:40.219Z', 'x-api-received': '2025-09-25T13:30:40.209Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 c6ccd07e1e50408d404ed1f9dd2506ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'ZKMC0e6_oskVKExole1nuER4WnDq6Bjg4dvN2qt9n3S0yvRR_F2uXQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekp8w-3NKUce-984ae09deb87d6f5
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation '5-day for 10115, DE.' took 0.82s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'country_code': 'DE', 'lang': 'en', 'units': 'metric', 'zip': '10115'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ea330dfc-0784-476f-a85b-826c0cd6bdc6', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Next five days SW1A 1AA, GB.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE254DF0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2549D0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:46 GMT'), (b'x-ratelimit-remaining-tokens', b'32584'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekqid-62bZhn-984ae0c22f5d574c'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae0c22f5d574c-IAD'), (b'etag', b'W/"359-hjm9jWQKx6ImyMJmpiHIpaki48c"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:46.006Z'), (b'x-api-call-start', b'2025-09-25T13:30:45.542Z'), (b'x-api-received', b'2025-09-25T13:30:45.533Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4c13f73e83aaf9d7bee2c3b379c641d6.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'8LWuJPnS2qdWyxrNvvkjjVTwl79Fzvj2vXs1U5lS9-xgw68qFQcBfQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:46 GMT', 'x-ratelimit-remaining-tokens': '32584', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekqid-62bZhn-984ae0c22f5d574c', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae0c22f5d574c-IAD', 'etag': 'W/"359-hjm9jWQKx6ImyMJmpiHIpaki48c"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:46.006Z', 'x-api-call-start': '2025-09-25T13:30:45.542Z', 'x-api-received': '2025-09-25T13:30:45.533Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4c13f73e83aaf9d7bee2c3b379c641d6.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '8LWuJPnS2qdWyxrNvvkjjVTwl79Fzvj2vXs1U5lS9-xgw68qFQcBfQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekqid-62bZhn-984ae0c22f5d574c
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Next five days SW1A 1AA, GB.' took 0.83s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'SW1A', 'country_code': 'GB', 'lang': 'en'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9a7fb30f-b8f3-45ba-bf68-c53d9acadd7a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Forecast 75001, FR.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE256B60>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE256740>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:52 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeksUA-66dFFu-984ae0e6cfaf2ade'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae0e6cfaf2ade-IAD'), (b'etag', b'W/"36d-R4q4FE5krQ/Gl6VnzHWkz+GwX1Q"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:51.964Z'), (b'x-api-call-start', b'2025-09-25T13:30:51.425Z'), (b'x-api-received', b'2025-09-25T13:30:51.415Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 8b0fd9a74745a3290a9c7ffef7d75076.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'11jPZ8hUc_Xi9ndRoqR1bEPn-M6DNy3OrQQ0oPx3Q677Avohojuq0w==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:52 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeksUA-66dFFu-984ae0e6cfaf2ade', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae0e6cfaf2ade-IAD', 'etag': 'W/"36d-R4q4FE5krQ/Gl6VnzHWkz+GwX1Q"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:51.964Z', 'x-api-call-start': '2025-09-25T13:30:51.425Z', 'x-api-received': '2025-09-25T13:30:51.415Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 8b0fd9a74745a3290a9c7ffef7d75076.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '11jPZ8hUc_Xi9ndRoqR1bEPn-M6DNy3OrQQ0oPx3Q677Avohojuq0w=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeksUA-66dFFu-984ae0e6cfaf2ade
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Forecast 75001, FR.' took 0.91s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'country_code': 'FR', 'lang': 'fr', 'units': 'metric', 'zip': '75001'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-180a55e1-7651-4655-ae3c-bd21b8eb42ad', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': '5-day for 1250-096, PT.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE22B7F0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE229E10>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:30:57 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekuD4-66dFFu-984ae10b9e3b99fb'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae10b9e3b99fb-IAD'), (b'etag', b'W/"370-seoZesKORpmPGtI103QLEWOI9HY"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:30:57.803Z'), (b'x-api-call-start', b'2025-09-25T13:30:57.280Z'), (b'x-api-received', b'2025-09-25T13:30:57.267Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'TxZnHnUS99F3UlLfGYVQypbG9kpDd0B1QwO8BjjN7QjkOuiSNkvBsA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:30:57 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekuD4-66dFFu-984ae10b9e3b99fb', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae10b9e3b99fb-IAD', 'etag': 'W/"370-seoZesKORpmPGtI103QLEWOI9HY"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:30:57.803Z', 'x-api-call-start': '2025-09-25T13:30:57.280Z', 'x-api-received': '2025-09-25T13:30:57.267Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'TxZnHnUS99F3UlLfGYVQypbG9kpDd0B1QwO8BjjN7QjkOuiSNkvBsA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekuD4-66dFFu-984ae10b9e3b99fb
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation '5-day for 1250-096, PT.' took 0.82s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'country_code': 'PT', 'lang': 'en', 'units': 'metric', 'zip': '1250-096'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-eb05a6d9-617e-42fe-b5f0-7d45d1dcc442', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Forecast for 2000, AU.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE28C160>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2541F0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:03 GMT'), (b'x-ratelimit-remaining-tokens', b'29541'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekvzs-62bZhn-984ae130e8a1e63d'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae130e8a1e63d-IAD'), (b'etag', b'W/"36b-pn6pBhNLgtT2DL7fp+tBV53CjWo"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:03.820Z'), (b'x-api-call-start', b'2025-09-25T13:31:03.299Z'), (b'x-api-received', b'2025-09-25T13:31:03.289Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 c6ccd07e1e50408d404ed1f9dd2506ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'ZAtcLh9kUEsaRmXnAfwpN6LonrgaWgLkB7iNO3a4V24M75chpCE2mA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:03 GMT', 'x-ratelimit-remaining-tokens': '29541', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekvzs-62bZhn-984ae130e8a1e63d', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae130e8a1e63d-IAD', 'etag': 'W/"36b-pn6pBhNLgtT2DL7fp+tBV53CjWo"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:03.820Z', 'x-api-call-start': '2025-09-25T13:31:03.299Z', 'x-api-received': '2025-09-25T13:31:03.289Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 c6ccd07e1e50408d404ed1f9dd2506ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'ZAtcLh9kUEsaRmXnAfwpN6LonrgaWgLkB7iNO3a4V24M75chpCE2mA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekvzs-62bZhn-984ae130e8a1e63d
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Forecast for 2000, AU.' took 1.04s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'country_code': 'AU', 'lang': 'en', 'units': 'metric', 'zip': '2000'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-38c02a34-663a-4cfb-8178-29c0c131bb4f', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': '5-day outlook 01000-000, BR.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE28DF00>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE28DAE0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:09 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekxjt-62bZhn-984ae155cc2ec963'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae155cc2ec963-IAD'), (b'etag', b'W/"36d-86GLh52wDlCcJ3VUI6fVkt3CFI8"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:09.667Z'), (b'x-api-call-start', b'2025-09-25T13:31:09.156Z'), (b'x-api-received', b'2025-09-25T13:31:09.148Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 1a8de953aa4aaf678d8f6dfdeeea9a46.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'i8iPH366FEvEaDyIrI5joSDtWlwgPnpJXDbOG59RRUUgtofdfebkGw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:09 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekxjt-62bZhn-984ae155cc2ec963', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae155cc2ec963-IAD', 'etag': 'W/"36d-86GLh52wDlCcJ3VUI6fVkt3CFI8"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:09.667Z', 'x-api-call-start': '2025-09-25T13:31:09.156Z', 'x-api-received': '2025-09-25T13:31:09.148Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 1a8de953aa4aaf678d8f6dfdeeea9a46.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'i8iPH366FEvEaDyIrI5joSDtWlwgPnpJXDbOG59RRUUgtofdfebkGw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekxjt-62bZhn-984ae155cc2ec963
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation '5-day outlook 01000-000, BR.' took 0.82s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'country_code': 'BR', 'lang': 'en', 'units': 'metric', 'zip': '01000'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f7fa66a8-21eb-4dd1-8e8a-07362adf069a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Next 5 days 110001, IN.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE229DB0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE229450>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:15 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCekzZi-62bZhn-984ae17c3e9e50b1'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae17c3e9e50b1-IAD'), (b'etag', b'W/"36d-FyeaVfDvTQkQGwhsjouO81jIiNo"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:15.760Z'), (b'x-api-call-start', b'2025-09-25T13:31:15.294Z'), (b'x-api-received', b'2025-09-25T13:31:15.285Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'p0xto6IJbjrmyJ-lpbkVphxQZsaVQ9TZaww80N9pQh-RQh8ABMXS0A==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:15 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCekzZi-62bZhn-984ae17c3e9e50b1', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae17c3e9e50b1-IAD', 'etag': 'W/"36d-FyeaVfDvTQkQGwhsjouO81jIiNo"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:15.760Z', 'x-api-call-start': '2025-09-25T13:31:15.294Z', 'x-api-received': '2025-09-25T13:31:15.285Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'p0xto6IJbjrmyJ-lpbkVphxQZsaVQ9TZaww80N9pQh-RQh8ABMXS0A=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCekzZi-62bZhn-984ae17c3e9e50b1
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Next 5 days 110001, IN.' took 1.08s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'country_code': 'IN', 'lang': 'en', 'units': 'metric', 'zip': '11001'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0f0d9f25-3ebc-4571-bc6d-e9956b1421fb', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Five-day forecast Kyoto, JP.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:21 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCem2Qz-3NKUce-984ae1a0091aa727'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae1a0091aa727-IAD'), (b'etag', b'W/"36f-U/1Pt7Mx0H8axMicY86vPhEKSBA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:22.032Z'), (b'x-api-call-start', b'2025-09-25T13:31:21.519Z'), (b'x-api-received', b'2025-09-25T13:31:21.508Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'W0LIH4L_CLzvEzSH1plaUgK651DdYxfaNVaFZqfiwKPCuD3uqmvmbg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:21 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCem2Qz-3NKUce-984ae1a0091aa727', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae1a0091aa727-IAD', 'etag': 'W/"36f-U/1Pt7Mx0H8axMicY86vPhEKSBA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:22.032Z', 'x-api-call-start': '2025-09-25T13:31:21.519Z', 'x-api-received': '2025-09-25T13:31:21.508Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'W0LIH4L_CLzvEzSH1plaUgK651DdYxfaNVaFZqfiwKPCuD3uqmvmbg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCem2Qz-3NKUce-984ae1a0091aa727
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Five-day forecast Kyoto, JP.' took 0.80s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Kyoto', 'country_code': 'JP', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6e2b8db0-3471-44ee-8c46-4fdb4654f93f', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's the 5-day in Toronto, CA?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2B5870>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2B5450>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:27 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCem4Gt-3NKUce-984ae1c4a9c4c967'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae1c4a9c4c967-IAD'), (b'etag', b'W/"387-d/L7cECVH21s/AZgA2capQr80bo"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:28.222Z'), (b'x-api-call-start', b'2025-09-25T13:31:27.775Z'), (b'x-api-received', b'2025-09-25T13:31:27.765Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 68c9162ccc29f8f3ca30be36950cea58.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'vKxO96ba3gZ5BGi5ZtRfassf5PrhJiWV1ZBabq-ykS80yedxHKaQiQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:27 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCem4Gt-3NKUce-984ae1c4a9c4c967', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae1c4a9c4c967-IAD', 'etag': 'W/"387-d/L7cECVH21s/AZgA2capQr80bo"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:28.222Z', 'x-api-call-start': '2025-09-25T13:31:27.775Z', 'x-api-received': '2025-09-25T13:31:27.765Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 68c9162ccc29f8f3ca30be36950cea58.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'vKxO96ba3gZ5BGi5ZtRfassf5PrhJiWV1ZBabq-ykS80yedxHKaQiQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCem4Gt-3NKUce-984ae1c4a9c4c967
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'What's the 5-day in Toronto, CA?' took 0.74s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Toronto', 'country_code': 'US', 'lang': 'en', 'state_code': 'CA', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8f39ba00-a11c-4957-90af-bd7a26969196', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': '5-day forecast Nairobi.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE28FC40>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE28F520>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:33 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCem5jZ-62bZhn-984ae1e8ced62952'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae1e8ced62952-IAD'), (b'etag', b'W/"371-HPyZ52c2iM+aak5xF35f/Cq5KEo"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:33.152Z'), (b'x-api-call-start', b'2025-09-25T13:31:32.684Z'), (b'x-api-received', b'2025-09-25T13:31:32.676Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'9cp_ozJ22pJVi-f56jqhjfoUhzKM3tFxGDrTjG-4WWPahKGUz7izUQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:33 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCem5jZ-62bZhn-984ae1e8ced62952', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae1e8ced62952-IAD', 'etag': 'W/"371-HPyZ52c2iM+aak5xF35f/Cq5KEo"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:33.152Z', 'x-api-call-start': '2025-09-25T13:31:32.684Z', 'x-api-received': '2025-09-25T13:31:32.676Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '9cp_ozJ22pJVi-f56jqhjfoUhzKM3tFxGDrTjG-4WWPahKGUz7izUQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCem5jZ-62bZhn-984ae1e8ced62952
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation '5-day forecast Nairobi.' took 0.84s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Nairobi', 'country_code': 'KE', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8d8ef022-cb60-43a5-8532-96a22951d68e', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Week ahead in Auckland, NZ.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2B6DD0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2B69B0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:39 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCem7oR-3NKUce-984ae20ebfd7c5ad'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae20ebfd7c5ad-IAD'), (b'etag', b'W/"372-KgcMn/CrHUdxdUGJpRZrqdyXdr8"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:40.124Z'), (b'x-api-call-start', b'2025-09-25T13:31:39.639Z'), (b'x-api-received', b'2025-09-25T13:31:39.629Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'198'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'PbFVGJGpplE6TVDVKJJ4L2vOzJeksOhpfgSAedkU4TJ7Lb0CZHdidA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:39 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCem7oR-3NKUce-984ae20ebfd7c5ad', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae20ebfd7c5ad-IAD', 'etag': 'W/"372-KgcMn/CrHUdxdUGJpRZrqdyXdr8"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:40.124Z', 'x-api-call-start': '2025-09-25T13:31:39.639Z', 'x-api-received': '2025-09-25T13:31:39.629Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '198', 'x-cache': 'Miss from cloudfront', 'via': '1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'PbFVGJGpplE6TVDVKJJ4L2vOzJeksOhpfgSAedkU4TJ7Lb0CZHdidA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCem7oR-3NKUce-984ae20ebfd7c5ad
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Week ahead in Auckland, NZ.' took 1.06s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Auckland', 'country_code': 'NZ', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3b7180d6-2443-483a-aecd-367b9c5f851c', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': '5-day for Reykjavik, IS (typo earlier).'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:45 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCem9Kb-62bZhn-984ae2343d154ba9'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae2343d154ba9-IAD'), (b'etag', b'W/"35d-O18mFaGvP5QN+Sw6McymAYcpLaY"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:45.264Z'), (b'x-api-call-start', b'2025-09-25T13:31:44.751Z'), (b'x-api-received', b'2025-09-25T13:31:44.743Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'ch3V2plmld2ry8RYAiJkW-CCjgTaXLeXqWoAPYHOKOmogzDGngi6zQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:45 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCem9Kb-62bZhn-984ae2343d154ba9', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae2343d154ba9-IAD', 'etag': 'W/"35d-O18mFaGvP5QN+Sw6McymAYcpLaY"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:45.264Z', 'x-api-call-start': '2025-09-25T13:31:44.751Z', 'x-api-received': '2025-09-25T13:31:44.743Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'ch3V2plmld2ry8RYAiJkW-CCjgTaXLeXqWoAPYHOKOmogzDGngi6zQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCem9Kb-62bZhn-984ae2343d154ba9
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation '5-day for Reykjavik, IS (typo earlier).' took 1.04s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Reykjavik', 'country_code': 'IS', 'lang': 'en'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-23fbd9d0-d02f-4b89-956b-a8a79bb85945', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Forecast 5 days Lima, PE.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:51 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCemB6N-62bZhn-984ae2599924c958'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae2599924c958-IAD'), (b'etag', b'W/"36d-GNzcpag+fEp1bGEmMjpxHii0V9U"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:51.176Z'), (b'x-api-call-start', b'2025-09-25T13:31:50.712Z'), (b'x-api-received', b'2025-09-25T13:31:50.703Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'4tbyoCOTnSfkDyNpBO9xojMC2iNGUOLaFP387XV-IMn5WNIPowS1Ng==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:51 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCemB6N-62bZhn-984ae2599924c958', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae2599924c958-IAD', 'etag': 'W/"36d-GNzcpag+fEp1bGEmMjpxHii0V9U"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:51.176Z', 'x-api-call-start': '2025-09-25T13:31:50.712Z', 'x-api-received': '2025-09-25T13:31:50.703Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '4tbyoCOTnSfkDyNpBO9xojMC2iNGUOLaFP387XV-IMn5WNIPowS1Ng=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCemB6N-62bZhn-984ae2599924c958
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Forecast 5 days Lima, PE.' took 0.92s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Lima', 'country_code': 'PE', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ca16a036-1bd0-4432-afba-9c9a3fa5b05e', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Next 5 days Johannesburg, ZA.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE257910>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2B4E50>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:31:57 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCemCr6-66dFFu-984ae27e0d7329b6'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae27e0d7329b6-IAD'), (b'etag', b'W/"375-k0d/KGpcoUIbZAYNnQIJw1PF4vs"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:31:57.161Z'), (b'x-api-call-start', b'2025-09-25T13:31:56.613Z'), (b'x-api-received', b'2025-09-25T13:31:56.603Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4c13f73e83aaf9d7bee2c3b379c641d6.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'8r0nTD67_OWVzLAL5ImHjcw_oCUh8BPIBeF7vIvk4m8cdpCmwqQTiQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:31:57 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCemCr6-66dFFu-984ae27e0d7329b6', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae27e0d7329b6-IAD', 'etag': 'W/"375-k0d/KGpcoUIbZAYNnQIJw1PF4vs"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:31:57.161Z', 'x-api-call-start': '2025-09-25T13:31:56.613Z', 'x-api-received': '2025-09-25T13:31:56.603Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4c13f73e83aaf9d7bee2c3b379c641d6.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '8r0nTD67_OWVzLAL5ImHjcw_oCUh8BPIBeF7vIvk4m8cdpCmwqQTiQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCemCr6-66dFFu-984ae27e0d7329b6
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Next 5 days Johannesburg, ZA.' took 0.96s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Johannesburg', 'country_code': 'ZA', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-835c51c8-ed2a-4a8a-bc73-3e56ce488e59', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Munich, DE 5-day outlook.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2D9B40>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x00000208CC7CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000208CE2D80D0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:32:03 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCemEbt-62bZhn-984ae2a33a368bda'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae2a33a368bda-IAD'), (b'etag', b'W/"35b-JWn5ezG5G9K6OYDo/j51cX1Yn/U"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:32:03.020Z'), (b'x-api-call-start', b'2025-09-25T13:32:02.516Z'), (b'x-api-received', b'2025-09-25T13:32:02.507Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 42bf01bb5b494f9d7ad3dd5810b5a212.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'Swtb3VsWC4fCXTozgHiSHT_1GBG83GK_yYx53l1rPSOO_u7D1JHmeQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:32:03 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCemEbt-62bZhn-984ae2a33a368bda', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae2a33a368bda-IAD', 'etag': 'W/"35b-JWn5ezG5G9K6OYDo/j51cX1Yn/U"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:32:03.020Z', 'x-api-call-start': '2025-09-25T13:32:02.516Z', 'x-api-received': '2025-09-25T13:32:02.507Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 42bf01bb5b494f9d7ad3dd5810b5a212.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'Swtb3VsWC4fCXTozgHiSHT_1GBG83GK_yYx53l1rPSOO_u7D1JHmeQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCemEbt-62bZhn-984ae2a33a368bda
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'Munich, DE 5-day outlook.' took 0.86s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Munich', 'country_code': 'DE', 'lang': 'en'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e04702a5-4e19-4463-8128-c6bd8905486a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'San Francisco, US-CA 5-day forecast.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:32:08 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCemGKo-66dFFu-984ae2c79f80d68c'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae2c79f80d68c-IAD'), (b'etag', b'W/"38d-hHsEqJBR2rO9blw2bNLBL8OjBwo"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:32:08.751Z'), (b'x-api-call-start', b'2025-09-25T13:32:08.313Z'), (b'x-api-received', b'2025-09-25T13:32:08.303Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 42bf01bb5b494f9d7ad3dd5810b5a212.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'xZE8_d80OgBYBIW2GtK0TtBpIomXwAueKbi3jJ2Netfgfvu6iYxbgg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:32:08 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCemGKo-66dFFu-984ae2c79f80d68c', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae2c79f80d68c-IAD', 'etag': 'W/"38d-hHsEqJBR2rO9blw2bNLBL8OjBwo"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:32:08.751Z', 'x-api-call-start': '2025-09-25T13:32:08.313Z', 'x-api-received': '2025-09-25T13:32:08.303Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 42bf01bb5b494f9d7ad3dd5810b5a212.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'xZE8_d80OgBYBIW2GtK0TtBpIomXwAueKbi3jJ2Netfgfvu6iYxbgg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCemGKo-66dFFu-984ae2c79f80d68c
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation 'San Francisco, US-CA 5-day forecast.' took 0.71s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'San Francisco', 'country_code': 'US', 'lang': 'en', 'state_code': 'CA', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6f520ea4-0b06-45ab-9d96-c9f7defc18ee', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': '5-day for Porto, PT.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:32:14 GMT'), (b'x-ratelimit-remaining-tokens', b'27312'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCemJNr-3NKUce-984ae2eb4bd5aa75'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae2eb4bd5aa75-IAD'), (b'etag', b'W/"36e-GvhCVLHw2sITlbWbBqG5TDqGyjo"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:32:15.719Z'), (b'x-api-call-start', b'2025-09-25T13:32:15.228Z'), (b'x-api-received', b'2025-09-25T13:32:15.208Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 42bf01bb5b494f9d7ad3dd5810b5a212.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'-e54-UAi3hBb13fvIgFB3dNQBxWbYFlYU6f8gVCmp6Q8G7dNE3QUiQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:32:14 GMT', 'x-ratelimit-remaining-tokens': '27312', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCemJNr-3NKUce-984ae2eb4bd5aa75', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae2eb4bd5aa75-IAD', 'etag': 'W/"36e-GvhCVLHw2sITlbWbBqG5TDqGyjo"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:32:15.719Z', 'x-api-call-start': '2025-09-25T13:32:15.228Z', 'x-api-received': '2025-09-25T13:32:15.208Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 42bf01bb5b494f9d7ad3dd5810b5a212.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '-e54-UAi3hBb13fvIgFB3dNQBxWbYFlYU6f8gVCmp6Q8G7dNE3QUiQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCemJNr-3NKUce-984ae2eb4bd5aa75
DEBUG    test_performance:test_performance.py:379 5 day forecast conversation '5-day for Porto, PT.' took 0.79s with response: 
LLMResponse(type='function_call', content=None, function='get_forecast', module='meteorology', arguments={'city': 'Porto', 'country_code': 'PT', 'lang': 'en', 'units': 'metric'})


