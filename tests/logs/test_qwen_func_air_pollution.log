tDEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-dd350538-712d-491c-9478-0138aeb80ac7', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current air quality at 40.7128, -74.0060?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C504BB0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5048B0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:34:28 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCemyxX-62bZhn-984ae632dc1481f3'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae632dc1481f3-IAD'), (b'etag', b'W/"369-nM4Ov0b2rf/fYvrqY2bCgZ97XI0"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:34:28.878Z'), (b'x-api-call-start', b'2025-09-25T13:34:28.365Z'), (b'x-api-received', b'2025-09-25T13:34:28.357Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 e33c092c8429c324c2810046683bf2f2.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'rjjfRiEwMlGdChDmN3L5d97xD3vB7zkmZbRmzElhPsjaoVr-hzJmIg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:34:28 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCemyxX-62bZhn-984ae632dc1481f3', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae632dc1481f3-IAD', 'etag': 'W/"369-nM4Ov0b2rf/fYvrqY2bCgZ97XI0"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:34:28.878Z', 'x-api-call-start': '2025-09-25T13:34:28.365Z', 'x-api-received': '2025-09-25T13:34:28.357Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 e33c092c8429c324c2810046683bf2f2.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'rjjfRiEwMlGdChDmN3L5d97xD3vB7zkmZbRmzElhPsjaoVr-hzJmIg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCemyxX-62bZhn-984ae632dc1481f3
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Current air quality at 40.7128, -74.0060?' took 1.44s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': 40.7128, 'lon': -74.006, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-abf9d9f2-423d-42bf-8e36-a3d1cbff1cf0', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI near -33.8688, 151.2093 right now.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C506A40>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5064A0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:34:35 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCen1cn-3NKUce-984ae6583874e63f'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae6583874e63f-IAD'), (b'etag', b'W/"36a-oEIB+fd0fyyGUszfUGV3rBX9wJ0"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:34:34.551Z'), (b'x-api-call-start', b'2025-09-25T13:34:33.950Z'), (b'x-api-received', b'2025-09-25T13:34:33.940Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 a8c46277c4df8eb178aecf68b391d6de.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'qQgZWmvcslaDbhPbmbGZj9NBaYLuQN4wM9Er0QHq_Y2bj-tz9Ll4CA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:34:35 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCen1cn-3NKUce-984ae6583874e63f', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae6583874e63f-IAD', 'etag': 'W/"36a-oEIB+fd0fyyGUszfUGV3rBX9wJ0"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:34:34.551Z', 'x-api-call-start': '2025-09-25T13:34:33.950Z', 'x-api-received': '2025-09-25T13:34:33.940Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 a8c46277c4df8eb178aecf68b391d6de.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'qQgZWmvcslaDbhPbmbGZj9NBaYLuQN4wM9Er0QHq_Y2bj-tz9Ll4CA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCen1cn-3NKUce-984ae6583874e63f
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI near -33.8688, 151.2093 right now.' took 1.40s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': -33.8688, 'lon': 151.2093, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a4abf463-97e9-4753-b98e-7e5d9c87a343', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's PM2.5 at -23.5505, -46.6333?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C57C8E0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C57C4C0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:34:41 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCen3dF-62bZhn-984ae67fe8751877'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae67fe8751877-IAD'), (b'etag', b'W/"36b-YQQE5FosrwUWMsEYuVIYFyrC/Zs"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:34:41.251Z'), (b'x-api-call-start', b'2025-09-25T13:34:40.703Z'), (b'x-api-received', b'2025-09-25T13:34:40.695Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 42c937f806e6e43029a719b83b9a8612.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'TtucVBzFwVwpC6u2SUzpxgle2m4-4OKGjgY9gG2wgt2vOUs2aF2EYg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:34:41 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCen3dF-62bZhn-984ae67fe8751877', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae67fe8751877-IAD', 'etag': 'W/"36b-YQQE5FosrwUWMsEYuVIYFyrC/Zs"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:34:41.251Z', 'x-api-call-start': '2025-09-25T13:34:40.703Z', 'x-api-received': '2025-09-25T13:34:40.695Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 42c937f806e6e43029a719b83b9a8612.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'TtucVBzFwVwpC6u2SUzpxgle2m4-4OKGjgY9gG2wgt2vOUs2aF2EYg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCen3dF-62bZhn-984ae67fe8751877
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'What's PM2.5 at -23.5505, -46.6333?' took 0.89s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': -23.5505, 'lon': -46.6333, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-fb0d1799-82de-4c5e-bca1-9c045d118a01', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air pollution for 30.0444, 31.2357.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C506860>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5062F0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:34:47 GMT'), (b'x-ratelimit-remaining-tokens', b'28324'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCen5NZ-66dFFu-984ae6a4cf0c9d2e'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae6a4cf0c9d2e-IAD'), (b'etag', b'W/"368-Vj/CCn9cpUAdHzUYQUq/nU92KWU"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:34:47.187Z'), (b'x-api-call-start', b'2025-09-25T13:34:46.580Z'), (b'x-api-received', b'2025-09-25T13:34:46.570Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'WL3kiuDStOQqllSoEkvSao2z9mIFEe-rHkHNX6jPQqoFF4Qy1u4KGA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:34:47 GMT', 'x-ratelimit-remaining-tokens': '28324', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCen5NZ-66dFFu-984ae6a4cf0c9d2e', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae6a4cf0c9d2e-IAD', 'etag': 'W/"368-Vj/CCn9cpUAdHzUYQUq/nU92KWU"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:34:47.187Z', 'x-api-call-start': '2025-09-25T13:34:46.580Z', 'x-api-received': '2025-09-25T13:34:46.570Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'WL3kiuDStOQqllSoEkvSao2z9mIFEe-rHkHNX6jPQqoFF4Qy1u4KGA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCen5NZ-66dFFu-984ae6a4cf0c9d2e
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air pollution for 30.0444, 31.2357.' took 0.89s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': 30.0444, 'lon': 31.2357, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e7cf8bb0-9ec6-4517-89a6-ed207b568535', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI around 55.7558, 37.6173 (Moscow).'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C57F640>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C57F220>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:34:53 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCen6y5-3NKUce-984ae6c9ab5ed673'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae6c9ab5ed673-IAD'), (b'etag', b'W/"369-H3mdh8wUGqJ5xGLoZ+4At4ARW3c"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:34:52.622Z'), (b'x-api-call-start', b'2025-09-25T13:34:51.948Z'), (b'x-api-received', b'2025-09-25T13:34:51.937Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'hwAlstNQp_Dy9dfrGGfGZMplke-BacGKuYL3RqmkOh6_MvsRfwOdWg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:34:53 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCen6y5-3NKUce-984ae6c9ab5ed673', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae6c9ab5ed673-IAD', 'etag': 'W/"369-H3mdh8wUGqJ5xGLoZ+4At4ARW3c"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:34:52.622Z', 'x-api-call-start': '2025-09-25T13:34:51.948Z', 'x-api-received': '2025-09-25T13:34:51.937Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'hwAlstNQp_Dy9dfrGGfGZMplke-BacGKuYL3RqmkOh6_MvsRfwOdWg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCen6y5-3NKUce-984ae6c9ab5ed673
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI around 55.7558, 37.6173 (Moscow).' took 0.98s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': 55.7558, 'lon': 37.6173, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-71b0913d-d37b-480e-823a-d8e3af0e1de9', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current AQI for -1.2921, 36.8219.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5A53F0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5A4FD0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:34:59 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCen8kV-3NKUce-984ae6ef1c979c48'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae6ef1c979c48-IAD'), (b'etag', b'W/"369-7T7TxW4iAov8SpTYfswRAK2Ye/U"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:34:58.567Z'), (b'x-api-call-start', b'2025-09-25T13:34:57.943Z'), (b'x-api-received', b'2025-09-25T13:34:57.934Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'kKdRfdi4qzhER8MKtMJ9wPpLE31rXDf89BOiomgOqWVONQXNk4ol_A==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:34:59 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCen8kV-3NKUce-984ae6ef1c979c48', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae6ef1c979c48-IAD', 'etag': 'W/"369-7T7TxW4iAov8SpTYfswRAK2Ye/U"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:34:58.567Z', 'x-api-call-start': '2025-09-25T13:34:57.943Z', 'x-api-received': '2025-09-25T13:34:57.934Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'kKdRfdi4qzhER8MKtMJ9wPpLE31rXDf89BOiomgOqWVONQXNk4ol_A=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCen8kV-3NKUce-984ae6ef1c979c48
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Current AQI for -1.2921, 36.8219.' took 0.94s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': -1.2921, 'lon': 36.8219, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0c681811-1aa5-431c-a502-857a4af82a46', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Is air clean near 64.1466, -21.9426?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:05 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenAgV-62bZhn-984ae7144ad2780e'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae7144ad2780e-IAD'), (b'etag', b'W/"369-qutxcxMQvOAOyDyNGxHCt5Gyjig"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:04.967Z'), (b'x-api-call-start', b'2025-09-25T13:35:04.440Z'), (b'x-api-received', b'2025-09-25T13:35:04.431Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'zAOnzTYThMPQ92aPbYKB8BvKeM93NnUe4Eun34nn6-F2E2D_fckJLg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:05 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenAgV-62bZhn-984ae7144ad2780e', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae7144ad2780e-IAD', 'etag': 'W/"369-qutxcxMQvOAOyDyNGxHCt5Gyjig"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:04.967Z', 'x-api-call-start': '2025-09-25T13:35:04.440Z', 'x-api-received': '2025-09-25T13:35:04.431Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'zAOnzTYThMPQ92aPbYKB8BvKeM93NnUe4Eun34nn6-F2E2D_fckJLg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenAgV-62bZhn-984ae7144ad2780e
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Is air clean near 64.1466, -21.9426?' took 0.96s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': 64.1466, 'lon': -21.9426, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7d761bde-782c-4d6f-adb3-1acddf364fad', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Pollution stats at -33.9249, 18.4241.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:11 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenCFK-3NKUce-984ae7394c04ea42'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae7394c04ea42-IAD'), (b'etag', b'W/"36a-1a6FVrmQg9IY6E8iJsXTgzRvuNI"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:10.357Z'), (b'x-api-call-start', b'2025-09-25T13:35:09.708Z'), (b'x-api-received', b'2025-09-25T13:35:09.698Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'yb2L5qMyGVwtrA-1V7357zJo25yPyzeeqm9UvhqI6y9px-B6cAAXBg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:11 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenCFK-3NKUce-984ae7394c04ea42', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae7394c04ea42-IAD', 'etag': 'W/"36a-1a6FVrmQg9IY6E8iJsXTgzRvuNI"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:10.357Z', 'x-api-call-start': '2025-09-25T13:35:09.708Z', 'x-api-received': '2025-09-25T13:35:09.698Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'yb2L5qMyGVwtrA-1V7357zJo25yPyzeeqm9UvhqI6y9px-B6cAAXBg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenCFK-3NKUce-984ae7394c04ea42
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Pollution stats at -33.9249, 18.4241.' took 0.95s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': -33.9249, 'lon': 18.4241, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-efbc4dad-030e-40be-8b9a-0de06cfc4020', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI now 35.6895, 139.6917.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5D4970>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5D4550>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:16 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenDzb-3NKUce-984ae75edebc3450'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae75edebc3450-IAD'), (b'etag', b'W/"292-UPjb2+Qak7lMiRfCazHj77K7wJc"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:16.006Z'), (b'x-api-call-start', b'2025-09-25T13:35:15.583Z'), (b'x-api-received', b'2025-09-25T13:35:15.573Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'gzyRabf3Xop1ZvILCivsib2_FjjueeHu1f-Btt0crTKKFIWvpAhBrQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:16 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenDzb-3NKUce-984ae75edebc3450', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae75edebc3450-IAD', 'etag': 'W/"292-UPjb2+Qak7lMiRfCazHj77K7wJc"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:16.006Z', 'x-api-call-start': '2025-09-25T13:35:15.583Z', 'x-api-received': '2025-09-25T13:35:15.573Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 55f14075e1cb487de38b7e615fd21a96.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'gzyRabf3Xop1ZvILCivsib2_FjjueeHu1f-Btt0crTKKFIWvpAhBrQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenDzb-3NKUce-984ae75edebc3450
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI now 35.6895, 139.6917.' took 0.75s with response: 
LLMResponse(type='response', content='It seems like you provided a location based on latitude and longitude. Shall I check the current air pollution for this location?', function=None, module=None, arguments=None)


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-eaf0d4d6-43b8-47dd-be95-756f613a25b3', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality 38.7223, -9.1393.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5A52D0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5A4FD0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:23 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenG1G-62bZhn-984ae78448bafe99'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae78448bafe99-IAD'), (b'etag', b'W/"368-dVdjQ9KTymKefhFzot6PXtwRBfY"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:22.982Z'), (b'x-api-call-start', b'2025-09-25T13:35:22.347Z'), (b'x-api-received', b'2025-09-25T13:35:22.339Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 e78b88048cb2f0beb893089a9fa30352.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'qzokxr8hrDSKI795UvBsW4QnfNXQWwqme-NNFPSjJwYcyST8JrjuwQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:23 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenG1G-62bZhn-984ae78448bafe99', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae78448bafe99-IAD', 'etag': 'W/"368-dVdjQ9KTymKefhFzot6PXtwRBfY"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:22.982Z', 'x-api-call-start': '2025-09-25T13:35:22.347Z', 'x-api-received': '2025-09-25T13:35:22.339Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 e78b88048cb2f0beb893089a9fa30352.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'qzokxr8hrDSKI795UvBsW4QnfNXQWwqme-NNFPSjJwYcyST8JrjuwQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenG1G-62bZhn-984ae78448bafe99
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality 38.7223, -9.1393.' took 1.18s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'lang': 'en', 'lat': 38.7223, 'lon': -9.1393, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-264b0c25-59c9-41fb-8fc1-b29731fea50f', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality for 10001, US.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5D6200>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5D5DE0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:29 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenHq2-66dFFu-984ae7a99dacc9bc'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae7a99dacc9bc-IAD'), (b'etag', b'W/"373-H4PtlsG/RtCnb/mkdBMnBAummVc"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:29.072Z'), (b'x-api-call-start', b'2025-09-25T13:35:28.485Z'), (b'x-api-received', b'2025-09-25T13:35:28.474Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'bwkQVVPgqdSiKgSxPieX7IToQx3j554bKBmYAAM_D2d5m_0q52oiZw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:29 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenHq2-66dFFu-984ae7a99dacc9bc', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae7a99dacc9bc-IAD', 'etag': 'W/"373-H4PtlsG/RtCnb/mkdBMnBAummVc"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:29.072Z', 'x-api-call-start': '2025-09-25T13:35:28.485Z', 'x-api-received': '2025-09-25T13:35:28.474Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'bwkQVVPgqdSiKgSxPieX7IToQx3j554bKBmYAAM_D2d5m_0q52oiZw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenHq2-66dFFu-984ae7a99dacc9bc
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality for 10001, US.' took 1.08s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'country_code': 'US', 'lang': 'en', 'units': 'metric', 'zip': '10001'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-31a0f2ba-9780-43e7-9f6d-ebe4c58de488', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI now at 90210, US.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:35 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenKP4-3NKUce-984ae7cf3cc1e5e6'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae7cf3cc1e5e6-IAD'), (b'etag', b'W/"373-dTFlvUuTTlc+Z8+TNNwRcoB6JoA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:34.552Z'), (b'x-api-call-start', b'2025-09-25T13:35:33.710Z'), (b'x-api-received', b'2025-09-25T13:35:33.696Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'HUF3Zdz_MMjMBn-RBLRbkLW9Xy3An4fir2ACrkYFKwVkTfBVzsRCpw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:35 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenKP4-3NKUce-984ae7cf3cc1e5e6', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae7cf3cc1e5e6-IAD', 'etag': 'W/"373-dTFlvUuTTlc+Z8+TNNwRcoB6JoA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:34.552Z', 'x-api-call-start': '2025-09-25T13:35:33.710Z', 'x-api-received': '2025-09-25T13:35:33.696Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'HUF3Zdz_MMjMBn-RBLRbkLW9Xy3An4fir2ACrkYFKwVkTfBVzsRCpw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenKP4-3NKUce-984ae7cf3cc1e5e6
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI now at 90210, US.' took 1.34s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'country_code': 'US', 'lang': 'en', 'units': 'metric', 'zip': '90210'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-13571a66-41c2-465b-99c3-42b95bc87002', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Pollution level 60614, US.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:41 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenMTV-66dFFu-984ae7f6ed40e5cb'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae7f6ed40e5cb-IAD'), (b'etag', b'W/"373-ipZgB5nuLY/2mourv7qdKybc068"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:41.148Z'), (b'x-api-call-start', b'2025-09-25T13:35:40.691Z'), (b'x-api-received', b'2025-09-25T13:35:40.681Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'pX5kRJAgCxAkdyepmzNddI4AiA7hCoQarsRs9IoOB6i2TTPAhx3Leg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:41 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenMTV-66dFFu-984ae7f6ed40e5cb', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae7f6ed40e5cb-IAD', 'etag': 'W/"373-ipZgB5nuLY/2mourv7qdKybc068"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:41.148Z', 'x-api-call-start': '2025-09-25T13:35:40.691Z', 'x-api-received': '2025-09-25T13:35:40.681Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'pX5kRJAgCxAkdyepmzNddI4AiA7hCoQarsRs9IoOB6i2TTPAhx3Leg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenMTV-66dFFu-984ae7f6ed40e5cb
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Pollution level 60614, US.' took 0.73s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': '60614', 'country_code': 'US', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2cfcc44b-d04c-48e9-b984-34d5ec3d0318', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI 10115, DE.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5F9A80>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5F9660>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:47 GMT'), (b'x-ratelimit-remaining-tokens', b'29705'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenPBf-62bZhn-984ae81b19d5dc40'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae81b19d5dc40-IAD'), (b'etag', b'W/"3b7-Z3tzs5QgE05OswRsnifsZrPzM4A"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:47.302Z'), (b'x-api-call-start', b'2025-09-25T13:35:46.512Z'), (b'x-api-received', b'2025-09-25T13:35:46.505Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'DgD4L5d5HvIJ-Ok5BJTqzmmfo9AdwLGPlOeMhHhMwqBN_D6MDpd8FQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:47 GMT', 'x-ratelimit-remaining-tokens': '29705', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenPBf-62bZhn-984ae81b19d5dc40', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae81b19d5dc40-IAD', 'etag': 'W/"3b7-Z3tzs5QgE05OswRsnifsZrPzM4A"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:47.302Z', 'x-api-call-start': '2025-09-25T13:35:46.512Z', 'x-api-received': '2025-09-25T13:35:46.505Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'DgD4L5d5HvIJ-Ok5BJTqzmmfo9AdwLGPlOeMhHhMwqBN_D6MDpd8FQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenPBf-62bZhn-984ae81b19d5dc40
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI 10115, DE.' took 1.18s with response: 
LLMResponse(type='response', content="It seems like you're referring to an Air Quality Index (AQI) value of 10115, which is quite high and might indicate an error or misunderstanding since typical AQI values range from 0 to 500. Could you please clarify or specify the location you are referring to? If you want to check the air quality for a specific place, please provide the city name, state code (DE for Delaware), or zip code along with the country code.", function=None, module=None, arguments=None)


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f821d254-cdb8-487b-a733-bdd94f892bf2', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality SW1A 1AA, GB.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5FB7F0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5FB3D0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:53 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenQoE-3NKUce-984ae841a846c56e'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae841a846c56e-IAD'), (b'etag', b'W/"351-52nclvwFCRVt35VvXX+nKCccQPQ"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:52.431Z'), (b'x-api-call-start', b'2025-09-25T13:35:51.928Z'), (b'x-api-received', b'2025-09-25T13:35:51.918Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 c6ccd07e1e50408d404ed1f9dd2506ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'SLqSXbG6ZdvFjKPJDOl4ZkHzksae_n-P3lPo5oLjn_0nL3x3m6IoOg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:53 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenQoE-3NKUce-984ae841a846c56e', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae841a846c56e-IAD', 'etag': 'W/"351-52nclvwFCRVt35VvXX+nKCccQPQ"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:52.431Z', 'x-api-call-start': '2025-09-25T13:35:51.928Z', 'x-api-received': '2025-09-25T13:35:51.918Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 c6ccd07e1e50408d404ed1f9dd2506ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'SLqSXbG6ZdvFjKPJDOl4ZkHzksae_n-P3lPo5oLjn_0nL3x3m6IoOg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenQoE-3NKUce-984ae841a846c56e
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality SW1A 1AA, GB.' took 0.92s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'SW1A 1AA', 'country_code': 'GB'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-efd3aed8-634e-4c31-9eb0-93fbf74a7a8e', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI 75001, FR.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5F9570>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5FBC10>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:35:59 GMT'), (b'x-ratelimit-remaining-tokens', b'29893'), (b'x-ratelimit-reset', b'0'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenSmq-62bZhn-984ae866acbae14c'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae866acbae14c-IAD'), (b'etag', b'W/"374-PX760R76YlZHNdZQza6OLdjc5Ok"'), (b'retry-after', b'0'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:35:59.339Z'), (b'x-api-call-start', b'2025-09-25T13:35:58.573Z'), (b'x-api-received', b'2025-09-25T13:35:58.565Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'198'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 56d84f665e9029878cb3adcd83a21026.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'HtHPql80rdjuUUC_3yIjfsnqojeYGz3aRgKKJZ-FJlnJcXufjuIhDQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:35:59 GMT', 'x-ratelimit-remaining-tokens': '29893', 'x-ratelimit-reset': '0', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenSmq-62bZhn-984ae866acbae14c', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae866acbae14c-IAD', 'etag': 'W/"374-PX760R76YlZHNdZQza6OLdjc5Ok"', 'retry-after': '0', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:35:59.339Z', 'x-api-call-start': '2025-09-25T13:35:58.573Z', 'x-api-received': '2025-09-25T13:35:58.565Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '198', 'x-cache': 'Miss from cloudfront', 'via': '1.1 56d84f665e9029878cb3adcd83a21026.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'HtHPql80rdjuUUC_3yIjfsnqojeYGz3aRgKKJZ-FJlnJcXufjuIhDQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenSmq-62bZhn-984ae866acbae14c
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI 75001, FR.' took 1.08s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Paris', 'country_code': 'FR', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e4faeb5d-73b0-470d-b398-0bbfebb23efc', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality 1250-096, PT.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C629B10>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C6296F0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:05 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenUNR-3NKUce-984ae88ceeac082e'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae88ceeac082e-IAD'), (b'etag', b'W/"376-yERdu66DUGNEGwHJvorUCdTJM8Q"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:04.450Z'), (b'x-api-call-start', b'2025-09-25T13:36:03.945Z'), (b'x-api-received', b'2025-09-25T13:36:03.935Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 f13924e40949c7e0a5bd0c7e333695f2.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'ikM2FuPYx7Tx4uwVLdPRDR3GalqPtJTO9y-SCrTL0AeOKeLjIYfs8Q==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:05 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenUNR-3NKUce-984ae88ceeac082e', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae88ceeac082e-IAD', 'etag': 'W/"376-yERdu66DUGNEGwHJvorUCdTJM8Q"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:04.450Z', 'x-api-call-start': '2025-09-25T13:36:03.945Z', 'x-api-received': '2025-09-25T13:36:03.935Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 f13924e40949c7e0a5bd0c7e333695f2.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'ikM2FuPYx7Tx4uwVLdPRDR3GalqPtJTO9y-SCrTL0AeOKeLjIYfs8Q=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenUNR-3NKUce-984ae88ceeac082e
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality 1250-096, PT.' took 0.83s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'country_code': 'PT', 'lang': 'en', 'units': 'metric', 'zip': '1250-096'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5dd45e4d-1a1f-470e-866d-210d2a78c1ce', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI 2000, AU.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C62B8E0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C62B4C0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:11 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenWBz-3NKUce-984ae8b2ade53ae7'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae8b2ade53ae7-IAD'), (b'etag', b'W/"33d-chmisq6ZK63+7ABaTN9TXEP8vAk"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:10.824Z'), (b'x-api-call-start', b'2025-09-25T13:36:10.066Z'), (b'x-api-received', b'2025-09-25T13:36:10.057Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 2c1fa76ea6af6e9212cf3e52e166c4ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'R340wC0gUyx5MbMfVL0UI8XSwpGEXd_u1O0ODcHHr96a7vbNZW3z8Q==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:11 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenWBz-3NKUce-984ae8b2ade53ae7', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae8b2ade53ae7-IAD', 'etag': 'W/"33d-chmisq6ZK63+7ABaTN9TXEP8vAk"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:10.824Z', 'x-api-call-start': '2025-09-25T13:36:10.066Z', 'x-api-received': '2025-09-25T13:36:10.057Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 2c1fa76ea6af6e9212cf3e52e166c4ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'R340wC0gUyx5MbMfVL0UI8XSwpGEXd_u1O0ODcHHr96a7vbNZW3z8Q=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenWBz-3NKUce-984ae8b2ade53ae7
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI 2000, AU.' took 1.34s with response: 
LLMResponse(type='response', content="It seems like you're referring to the Air Quality Index (AQI) with a value of 2000 for Australia. However, the AQI typically ranges from 0 to 500, so a value of 2000 is not realistic. Could you please clarify or provide a correct AQI value and the specific location in Australia you're interested in?", function=None, module=None, arguments=None)


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-38fe67a5-c3c6-4fff-be79-31d649d8a76e', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality 01000-000, BR.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C629BA0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5FB910>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:17 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenXzj-3NKUce-984ae8d91e9813b9'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae8d91e9813b9-IAD'), (b'etag', b'W/"34e-Na1kX6pHSl9+208WShqUP8S/dKA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:16.532Z'), (b'x-api-call-start', b'2025-09-25T13:36:16.143Z'), (b'x-api-received', b'2025-09-25T13:36:16.132Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 735dd7fa3c296627cd805d04e3e3a3e8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'G_VxzrOhdrAhuxQqkRtx-P4ZtLuM1fO-gLK6bOPb6lLZv7vf1TKXvg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:17 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenXzj-3NKUce-984ae8d91e9813b9', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae8d91e9813b9-IAD', 'etag': 'W/"34e-Na1kX6pHSl9+208WShqUP8S/dKA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:16.532Z', 'x-api-call-start': '2025-09-25T13:36:16.143Z', 'x-api-received': '2025-09-25T13:36:16.132Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 735dd7fa3c296627cd805d04e3e3a3e8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'G_VxzrOhdrAhuxQqkRtx-P4ZtLuM1fO-gLK6bOPb6lLZv7vf1TKXvg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenXzj-3NKUce-984ae8d91e9813b9
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality 01000-000, BR.' took 0.71s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'country_code': 'BR', 'zip': '01000'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e2aae3b1-3bb1-433b-9e69-f9881a268644', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI 110001, IN.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:23 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenZfM-3NKUce-984ae8fc9e906fb6'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae8fc9e906fb6-IAD'), (b'etag', b'W/"353-5uIsyyoUsrY8QDUWMPsVb88WejA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:22.258Z'), (b'x-api-call-start', b'2025-09-25T13:36:21.752Z'), (b'x-api-received', b'2025-09-25T13:36:21.737Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 735dd7fa3c296627cd805d04e3e3a3e8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'sTebxKeIrHCVAULChBAiD1i1sG8ioAKm8TWXtoARzZgF6gsfJIRZwQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:23 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenZfM-3NKUce-984ae8fc9e906fb6', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae8fc9e906fb6-IAD', 'etag': 'W/"353-5uIsyyoUsrY8QDUWMPsVb88WejA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:22.258Z', 'x-api-call-start': '2025-09-25T13:36:21.752Z', 'x-api-received': '2025-09-25T13:36:21.737Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 735dd7fa3c296627cd805d04e3e3a3e8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'sTebxKeIrHCVAULChBAiD1i1sG8ioAKm8TWXtoARzZgF6gsfJIRZwQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenZfM-3NKUce-984ae8fc9e906fb6
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI 110001, IN.' took 0.84s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'AQI 110001', 'country_code': 'IN'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c1fce0f9-163d-4efa-8a47-a13869af56d8', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current AQI Kyoto, JP.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C65A500>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C65A0E0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:29 GMT'), (b'x-ratelimit-remaining-tokens', b'26648'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenbfV-62bZhn-984ae921980c703c'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae921980c703c-IAD'), (b'etag', b'W/"373-6JI1pTn2kkLZkjAVYPmf9UY64uA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:28.952Z'), (b'x-api-call-start', b'2025-09-25T13:36:28.480Z'), (b'x-api-received', b'2025-09-25T13:36:28.473Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'G1yghUVZslOXsSuepea_BK4kJCON-r1CuiLuBiLY_BD-vLxnPj52vw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:29 GMT', 'x-ratelimit-remaining-tokens': '26648', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenbfV-62bZhn-984ae921980c703c', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae921980c703c-IAD', 'etag': 'W/"373-6JI1pTn2kkLZkjAVYPmf9UY64uA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:28.952Z', 'x-api-call-start': '2025-09-25T13:36:28.480Z', 'x-api-received': '2025-09-25T13:36:28.473Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'G1yghUVZslOXsSuepea_BK4kJCON-r1CuiLuBiLY_BD-vLxnPj52vw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenbfV-62bZhn-984ae921980c703c
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Current AQI Kyoto, JP.' took 0.82s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Kyoto', 'country_code': 'JP', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-06e4f6f8-97ca-4e7d-8799-33dc9039d2ab', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality Toronto, CA now.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:34 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCend9p-3NKUce-984ae9458d215666'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae9458d215666-IAD'), (b'etag', b'W/"376-VNoeX8yvCfatE4bcqMGvA4WNtxw"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:33.952Z'), (b'x-api-call-start', b'2025-09-25T13:36:33.489Z'), (b'x-api-received', b'2025-09-25T13:36:33.479Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'xDSgmOZzUAS3ldKUaFC0PaXLCGER_f--IVf7ac72CCklL9vqF5Z8tw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:34 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCend9p-3NKUce-984ae9458d215666', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae9458d215666-IAD', 'etag': 'W/"376-VNoeX8yvCfatE4bcqMGvA4WNtxw"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:33.952Z', 'x-api-call-start': '2025-09-25T13:36:33.489Z', 'x-api-received': '2025-09-25T13:36:33.479Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'xDSgmOZzUAS3ldKUaFC0PaXLCGER_f--IVf7ac72CCklL9vqF5Z8tw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCend9p-3NKUce-984ae9458d215666
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality Toronto, CA now.' took 0.76s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Toronto', 'country_code': 'CA', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1e4cf555-4f37-47c7-9898-56ebec3c77fb', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI Nairobi?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C65B640>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C65B400>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:40 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenf6z-62bZhn-984ae969edb605aa'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae969edb605aa-IAD'), (b'etag', b'W/"375-4meGxfVWrecyZ2QcTTarPp7b9M4"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:40.568Z'), (b'x-api-call-start', b'2025-09-25T13:36:40.052Z'), (b'x-api-received', b'2025-09-25T13:36:40.044Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'-eQ8hrM2URfx7UPX0NtPKCxvwJZjAKvMisOh88zIC3lj69JJzxxVyA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:40 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenf6z-62bZhn-984ae969edb605aa', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae969edb605aa-IAD', 'etag': 'W/"375-4meGxfVWrecyZ2QcTTarPp7b9M4"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:40.568Z', 'x-api-call-start': '2025-09-25T13:36:40.052Z', 'x-api-received': '2025-09-25T13:36:40.044Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '-eQ8hrM2URfx7UPX0NtPKCxvwJZjAKvMisOh88zIC3lj69JJzxxVyA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenf6z-62bZhn-984ae969edb605aa
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI Nairobi?' took 0.83s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Nairobi', 'country_code': 'KE', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9aafa031-5541-4ce3-9f40-b323f4bed57a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality in Auckland, NZ.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C6813F0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C680FD0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:46 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCengqh-66dFFu-984ae98e6f2ef27a'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae98e6f2ef27a-IAD'), (b'etag', b'W/"376-haRH9rM72ESFalnnbbF3EoLby+0"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:46.397Z'), (b'x-api-call-start', b'2025-09-25T13:36:45.894Z'), (b'x-api-received', b'2025-09-25T13:36:45.884Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 7a968ba892318de9d85ba300078a49ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'kqUwBaGG1WxQVX81ZpwD_s7UAiSLeg8sb362FFpS11l0HU5OpWX0pg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:46 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCengqh-66dFFu-984ae98e6f2ef27a', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae98e6f2ef27a-IAD', 'etag': 'W/"376-haRH9rM72ESFalnnbbF3EoLby+0"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:46.397Z', 'x-api-call-start': '2025-09-25T13:36:45.894Z', 'x-api-received': '2025-09-25T13:36:45.884Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 7a968ba892318de9d85ba300078a49ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'kqUwBaGG1WxQVX81ZpwD_s7UAiSLeg8sb362FFpS11l0HU5OpWX0pg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCengqh-66dFFu-984ae98e6f2ef27a
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality in Auckland, NZ.' took 0.80s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Auckland', 'country_code': 'NZ', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b2d8e77f-55a4-4742-83d5-dc8a1b41f93a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI Reykjavik, IS (sorry for prev typo).'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C65B730>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C658940>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:52 GMT'), (b'x-ratelimit-remaining-tokens', b'31193'), (b'x-ratelimit-reset', b'0'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenia9-62bZhn-984ae9b2cd11c96b'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae9b2cd11c96b-IAD'), (b'etag', b'W/"353-b4djB1Yx9r9aYx8bRrUxSTrSKX8"'), (b'retry-after', b'0'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:52.060Z'), (b'x-api-call-start', b'2025-09-25T13:36:51.724Z'), (b'x-api-received', b'2025-09-25T13:36:51.716Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'198'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'duQutHjLxiG5YGwsLFaVV633Upw8TugUzXeZl1ZptfF_wt_dcDVkWw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:52 GMT', 'x-ratelimit-remaining-tokens': '31193', 'x-ratelimit-reset': '0', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenia9-62bZhn-984ae9b2cd11c96b', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae9b2cd11c96b-IAD', 'etag': 'W/"353-b4djB1Yx9r9aYx8bRrUxSTrSKX8"', 'retry-after': '0', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:52.060Z', 'x-api-call-start': '2025-09-25T13:36:51.724Z', 'x-api-received': '2025-09-25T13:36:51.716Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '198', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'duQutHjLxiG5YGwsLFaVV633Upw8TugUzXeZl1ZptfF_wt_dcDVkWw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenia9-62bZhn-984ae9b2cd11c96b
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI Reykjavik, IS (sorry for prev typo).' took 0.67s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Reykjavik', 'country_code': 'IS'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d0551bb3-d596-40d0-8fd0-6aed2cc59da7', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Pollution level Lima, PE.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5D7760>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5D7970>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:36:57 GMT'), (b'x-ratelimit-remaining-tokens', b'31221'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenkFa-62bZhn-984ae9d62a9ba13a'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae9d62a9ba13a-IAD'), (b'etag', b'W/"373-nNGeAZqKVipnueXhpUEZFKY0oFw"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:36:57.903Z'), (b'x-api-call-start', b'2025-09-25T13:36:57.383Z'), (b'x-api-received', b'2025-09-25T13:36:57.375Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'VDXnTU4glr9_F1YlaB02rqc-q-fsq30mNaMkgTHah-E0ql9Q3_YKGQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:36:57 GMT', 'x-ratelimit-remaining-tokens': '31221', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenkFa-62bZhn-984ae9d62a9ba13a', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae9d62a9ba13a-IAD', 'etag': 'W/"373-nNGeAZqKVipnueXhpUEZFKY0oFw"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:36:57.903Z', 'x-api-call-start': '2025-09-25T13:36:57.383Z', 'x-api-received': '2025-09-25T13:36:57.375Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'VDXnTU4glr9_F1YlaB02rqc-q-fsq30mNaMkgTHah-E0ql9Q3_YKGQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenkFa-62bZhn-984ae9d62a9ba13a
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Pollution level Lima, PE.' took 0.83s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Lima', 'country_code': 'PE', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d5789be2-fea8-4af9-955f-e5ef29de41b3', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI Johannesburg, ZA.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C57C820>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C57CE80>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:37:03 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenmr8-3NKUce-984ae9fb4ee974d1'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984ae9fb4ee974d1-IAD'), (b'etag', b'W/"37a-QMtJm1I+5uj2AZ2YUm/68/G6nN0"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:37:03.299Z'), (b'x-api-call-start', b'2025-09-25T13:37:02.739Z'), (b'x-api-received', b'2025-09-25T13:37:02.729Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'gddngf8tqfbskxINj9eBfdcYXWk9IMWQaxfmgd6w_1JTbG3lJBtgaA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:37:03 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenmr8-3NKUce-984ae9fb4ee974d1', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984ae9fb4ee974d1-IAD', 'etag': 'W/"37a-QMtJm1I+5uj2AZ2YUm/68/G6nN0"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:37:03.299Z', 'x-api-call-start': '2025-09-25T13:37:02.739Z', 'x-api-received': '2025-09-25T13:37:02.729Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'gddngf8tqfbskxINj9eBfdcYXWk9IMWQaxfmgd6w_1JTbG3lJBtgaA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenmr8-3NKUce-984ae9fb4ee974d1
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI Johannesburg, ZA.' took 0.96s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Johannesburg', 'country_code': 'ZA', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a0afe624-98b0-4e34-945b-8da122c5189a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality Munich, DE.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:37:09 GMT'), (b'x-ratelimit-remaining-tokens', b'32814'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenomz-66dFFu-984aea1fd9e72064'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aea1fd9e72064-IAD'), (b'etag', b'W/"350-KTbZcbRN6WgbMGcbpLs5AtXrhUs"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:37:09.535Z'), (b'x-api-call-start', b'2025-09-25T13:37:09.227Z'), (b'x-api-received', b'2025-09-25T13:37:09.217Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'buqGrHBqVR0cl1VCBUYuR0dISkI7JjePqqYvAaF5OLq-bFhGh2y8CQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:37:09 GMT', 'x-ratelimit-remaining-tokens': '32814', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenomz-66dFFu-984aea1fd9e72064', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aea1fd9e72064-IAD', 'etag': 'W/"350-KTbZcbRN6WgbMGcbpLs5AtXrhUs"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:37:09.535Z', 'x-api-call-start': '2025-09-25T13:37:09.227Z', 'x-api-received': '2025-09-25T13:37:09.217Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'buqGrHBqVR0cl1VCBUYuR0dISkI7JjePqqYvAaF5OLq-bFhGh2y8CQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenomz-66dFFu-984aea1fd9e72064
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality Munich, DE.' took 0.65s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Munich', 'country_code': 'DE'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-be2e22ed-a971-47e5-a297-266c1c8b82b5', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'AQI San Francisco, US-CA.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5059C0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C5D7670>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:37:15 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCenqDX-3NKUce-984aea435ed5396d'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aea435ed5396d-IAD'), (b'etag', b'W/"391-PSTmqBj3xQg+KK8hhCSonzA32ww"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:37:14.588Z'), (b'x-api-call-start', b'2025-09-25T13:37:14.073Z'), (b'x-api-received', b'2025-09-25T13:37:14.063Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'Xjb5YmNf_G4CpD49aJrmmBXF3wb1x-0w1O7n4v3Rb82akSTLaRSB4w==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:37:15 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCenqDX-3NKUce-984aea435ed5396d', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aea435ed5396d-IAD', 'etag': 'W/"391-PSTmqBj3xQg+KK8hhCSonzA32ww"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:37:14.588Z', 'x-api-call-start': '2025-09-25T13:37:14.073Z', 'x-api-received': '2025-09-25T13:37:14.063Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 2b1fd1e1421ca124eaa002817c6c475a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'Xjb5YmNf_G4CpD49aJrmmBXF3wb1x-0w1O7n4v3Rb82akSTLaRSB4w=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCenqDX-3NKUce-984aea435ed5396d
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'AQI San Francisco, US-CA.' took 0.81s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'San Francisco', 'country_code': 'US', 'lang': 'en', 'state_code': 'CA', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-dcb69d62-118d-47af-b97f-bbad68d527a4', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Air quality Porto, PT.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C683F70>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002120AB8FEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002120C683B50>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:37:21 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCensE3-66dFFu-984aea680e974e63'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aea680e974e63-IAD'), (b'etag', b'W/"373-iLfPxky7aLxMoy+sfpjdWEpiyHY"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:37:21.402Z'), (b'x-api-call-start', b'2025-09-25T13:37:20.830Z'), (b'x-api-received', b'2025-09-25T13:37:20.820Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4c13f73e83aaf9d7bee2c3b379c641d6.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'LFWkA5-n1iF-Nw7N2Ht4u2S3Xo9wLfc2wYXYmI1SVNg2gp6G2LxPxA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:37:21 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCensE3-66dFFu-984aea680e974e63', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aea680e974e63-IAD', 'etag': 'W/"373-iLfPxky7aLxMoy+sfpjdWEpiyHY"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:37:21.402Z', 'x-api-call-start': '2025-09-25T13:37:20.830Z', 'x-api-received': '2025-09-25T13:37:20.820Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4c13f73e83aaf9d7bee2c3b379c641d6.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'LFWkA5-n1iF-Nw7N2Ht4u2S3Xo9wLfc2wYXYmI1SVNg2gp6G2LxPxA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCensE3-66dFFu-984aea680e974e63
DEBUG    test_performance:test_performance.py:393 Current air pollution conversation 'Air quality Porto, PT.' took 1.03s with response: 
LLMResponse(type='function_call', content=None, function='get_air_pollution', module='meteorology', arguments={'city': 'Porto', 'country_code': 'PT', 'lang': 'en', 'units': 'metric'})


