DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-643eb15a-ccf3-4233-be7a-f61a20175f32', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Steam.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3044AF0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30447F0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:39:45 GMT'), (b'x-ratelimit-remaining-tokens', b'32308'), (b'x-ratelimit-reset', b'0'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeoc17-62bZhn-984aedec18ccc130'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aedec18ccc130-IAD'), (b'etag', b'W/"35b-E7SPata9WbDRL40XM7aw2eH3NSE"'), (b'retry-after', b'0'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:39:45.128Z'), (b'x-api-call-start', b'2025-09-25T13:39:44.731Z'), (b'x-api-received', b'2025-09-25T13:39:44.723Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'198'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 42c937f806e6e43029a719b83b9a8612.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'W6VDaKb3oI1NtM3EXePGFaAvaIejygd0J4JObdRFUTTWj7S-jH5fXQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:39:45 GMT', 'x-ratelimit-remaining-tokens': '32308', 'x-ratelimit-reset': '0', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeoc17-62bZhn-984aedec18ccc130', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aedec18ccc130-IAD', 'etag': 'W/"35b-E7SPata9WbDRL40XM7aw2eH3NSE"', 'retry-after': '0', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:39:45.128Z', 'x-api-call-start': '2025-09-25T13:39:44.731Z', 'x-api-received': '2025-09-25T13:39:44.723Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '198', 'x-cache': 'Miss from cloudfront', 'via': '1.1 42c937f806e6e43029a719b83b9a8612.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'W6VDaKb3oI1NtM3EXePGFaAvaIejygd0J4JObdRFUTTWj7S-jH5fXQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeoc17-62bZhn-984aedec18ccc130
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Steam.' took 1.28s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Steam', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f2a1029d-b228-4bc1-8f5a-3510eec1444c', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Launch dis cord.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3046980>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30463E0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:39:50 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeodiU-66dFFu-984aee1009c98c9d'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aee1009c98c9d-IAD'), (b'etag', b'W/"35d-3bI98KpWOnu43Co/f15judoXwaI"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:39:50.878Z'), (b'x-api-call-start', b'2025-09-25T13:39:50.496Z'), (b'x-api-received', b'2025-09-25T13:39:50.485Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'PNRLt3Uwqg7aQr7y6K9lqyosAPRvvyQulH2LmuTVa_2_3D1wi4j-Mg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:39:50 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeodiU-66dFFu-984aee1009c98c9d', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aee1009c98c9d-IAD', 'etag': 'W/"35d-3bI98KpWOnu43Co/f15judoXwaI"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:39:50.878Z', 'x-api-call-start': '2025-09-25T13:39:50.496Z', 'x-api-received': '2025-09-25T13:39:50.485Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'PNRLt3Uwqg7aQr7y6K9lqyosAPRvvyQulH2LmuTVa_2_3D1wi4j-Mg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeodiU-66dFFu-984aee1009c98c9d
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Launch dis cord.' took 0.72s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Discord', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-44fef4db-04a8-4299-a144-589c7b7b6d51', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Start Eclipse IDE.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:39:56 GMT'), (b'x-ratelimit-remaining-tokens', b'29443'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeofFS-3NKUce-984aee338b79da52'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aee338b79da52-IAD'), (b'etag', b'W/"361-Q+N5ogVq47qAAoa02qA6Tayjyzg"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:39:56.008Z'), (b'x-api-call-start', b'2025-09-25T13:39:55.657Z'), (b'x-api-received', b'2025-09-25T13:39:55.646Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'uxFnHJYDueWB1A6032mORnobVvFg4wzXTlwuZDS7Z7SUQNpIxgbmSw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:39:56 GMT', 'x-ratelimit-remaining-tokens': '29443', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeofFS-3NKUce-984aee338b79da52', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aee338b79da52-IAD', 'etag': 'W/"361-Q+N5ogVq47qAAoa02qA6Tayjyzg"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:39:56.008Z', 'x-api-call-start': '2025-09-25T13:39:55.657Z', 'x-api-received': '2025-09-25T13:39:55.646Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'uxFnHJYDueWB1A6032mORnobVvFg4wzXTlwuZDS7Z7SUQNpIxgbmSw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeofFS-3NKUce-984aee338b79da52
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Start Eclipse IDE.' took 0.63s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Eclipse IDE', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5bba3be2-7589-44f8-8f5e-51e976424b44', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open VS Code.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3046380>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3046410>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:02 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeoh6V-66dFFu-984aee571bb8fbd0'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aee571bb8fbd0-IAD'), (b'etag', b'W/"35d-db94edF20HFHjUwIO6SgDHXrr24"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:02.280Z'), (b'x-api-call-start', b'2025-09-25T13:40:01.865Z'), (b'x-api-received', b'2025-09-25T13:40:01.854Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 d8d835cce198f21656f532aa7cb25fbe.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'-_p-gX7GT2Seaj_O1zc7BPQHE0ahhSnut7zFxig1nWmkOyMwczqo1Q==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:02 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeoh6V-66dFFu-984aee571bb8fbd0', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aee571bb8fbd0-IAD', 'etag': 'W/"35d-db94edF20HFHjUwIO6SgDHXrr24"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:02.280Z', 'x-api-call-start': '2025-09-25T13:40:01.865Z', 'x-api-received': '2025-09-25T13:40:01.854Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 d8d835cce198f21656f532aa7cb25fbe.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '-_p-gX7GT2Seaj_O1zc7BPQHE0ahhSnut7zFxig1nWmkOyMwczqo1Q=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeoh6V-66dFFu-984aee571bb8fbd0
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open VS Code.' took 0.84s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'VS Code', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-970d4867-9d20-4516-9663-6be885b45e2c', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Run visual studio code pls.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:08 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeoihA-3NKUce-984aee7b5eeed6e3'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aee7b5eeed6e3-IAD'), (b'etag', b'W/"367-mRM7SwO+w92FXnCiYkOugtoIRSs"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:07.610Z'), (b'x-api-call-start', b'2025-09-25T13:40:07.242Z'), (b'x-api-received', b'2025-09-25T13:40:07.230Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 d8d835cce198f21656f532aa7cb25fbe.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'zX81hY8vAf7prqLorrkubAoG7v0ReN8A_sy9bF9mxqZL2ZFVpr-_fA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:08 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeoihA-3NKUce-984aee7b5eeed6e3', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aee7b5eeed6e3-IAD', 'etag': 'W/"367-mRM7SwO+w92FXnCiYkOugtoIRSs"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:07.610Z', 'x-api-call-start': '2025-09-25T13:40:07.242Z', 'x-api-received': '2025-09-25T13:40:07.230Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 d8d835cce198f21656f532aa7cb25fbe.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'zX81hY8vAf7prqLorrkubAoG7v0ReN8A_sy9bF9mxqZL2ZFVpr-_fA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeoihA-3NKUce-984aee7b5eeed6e3
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Run visual studio code pls.' took 0.65s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Visual Studio Code', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c752663c-1e75-42c6-949c-c46ec8c3ebbe', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Launch VSC.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30E0070>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30BFC10>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:13 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeokWa-66dFFu-984aee9f0950c9b7'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aee9f0950c9b7-IAD'), (b'etag', b'W/"35a-QE3TyPVKbrzH921peQ4/gI5zlDc"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:13.704Z'), (b'x-api-call-start', b'2025-09-25T13:40:13.355Z'), (b'x-api-received', b'2025-09-25T13:40:13.344Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 7a968ba892318de9d85ba300078a49ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'ekwW9oZgR38u2GC4XsaqSFac5Of2cXUISaxO-vHKv6Cf0WFQJX8PDQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:13 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeokWa-66dFFu-984aee9f0950c9b7', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aee9f0950c9b7-IAD', 'etag': 'W/"35a-QE3TyPVKbrzH921peQ4/gI5zlDc"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:13.704Z', 'x-api-call-start': '2025-09-25T13:40:13.355Z', 'x-api-received': '2025-09-25T13:40:13.344Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 7a968ba892318de9d85ba300078a49ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'ekwW9oZgR38u2GC4XsaqSFac5Of2cXUISaxO-vHKv6Cf0WFQJX8PDQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeokWa-66dFFu-984aee9f0950c9b7
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Launch VSC.' took 0.66s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'VSC', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ff2dc727-7f86-4722-84a9-22be074fb10d', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Win RAR.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:19 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeonCA-66dFFu-984aeec23b02396a'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aeec23b02396a-IAD'), (b'etag', b'W/"35d-GsaNb8wmFoJOZ8sYuyh/XWUYtHc"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:19.450Z'), (b'x-api-call-start', b'2025-09-25T13:40:19.014Z'), (b'x-api-received', b'2025-09-25T13:40:19.003Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 7a968ba892318de9d85ba300078a49ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'u7IP3U3mU0984cg_trxsEH_sLpBNwMCii997SBG_eBPPV6M23YBVGQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:19 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeonCA-66dFFu-984aeec23b02396a', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aeec23b02396a-IAD', 'etag': 'W/"35d-GsaNb8wmFoJOZ8sYuyh/XWUYtHc"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:19.450Z', 'x-api-call-start': '2025-09-25T13:40:19.014Z', 'x-api-received': '2025-09-25T13:40:19.003Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 7a968ba892318de9d85ba300078a49ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'u7IP3U3mU0984cg_trxsEH_sLpBNwMCii997SBG_eBPPV6M23YBVGQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeonCA-66dFFu-984aeec23b02396a
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Win RAR.' took 0.74s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'WinRAR', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e327b330-5251-47e0-9cf7-f979a81b8f8d', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Start WinRAR.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30E0E80>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3044EE0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:25 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeoov5-66dFFu-984aeee6584138a3'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aeee6584138a3-IAD'), (b'etag', b'W/"35c-YCuGUOSO/wJ50S1BQTU2XCPtnbU"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:25.130Z'), (b'x-api-call-start', b'2025-09-25T13:40:24.808Z'), (b'x-api-received', b'2025-09-25T13:40:24.798Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 27a35654821ee52d8aa69c940ad5de7e.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'lUyhy85jTyUeo4Wv7EuiRxNUv0tmrOZ0X4Pdx8cQJOtwBBwvK0JxQQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:25 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeoov5-66dFFu-984aeee6584138a3', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aeee6584138a3-IAD', 'etag': 'W/"35c-YCuGUOSO/wJ50S1BQTU2XCPtnbU"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:25.130Z', 'x-api-call-start': '2025-09-25T13:40:24.808Z', 'x-api-received': '2025-09-25T13:40:24.798Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 27a35654821ee52d8aa69c940ad5de7e.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'lUyhy85jTyUeo4Wv7EuiRxNUv0tmrOZ0X4Pdx8cQJOtwBBwvK0JxQQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeoov5-66dFFu-984aeee6584138a3
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Start WinRAR.' took 0.67s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'WinRAR', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b43c65a8-e23d-4c04-b655-bbf523c7da6a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Google Chorme.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30E3280>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30E2E60>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:31 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeoqYd-3NKUce-984aef0b28035967'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aef0b28035967-IAD'), (b'etag', b'W/"364-gLpd6MFHXWwd7BfPv5+vFaFgQis"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:30.765Z'), (b'x-api-call-start', b'2025-09-25T13:40:30.293Z'), (b'x-api-received', b'2025-09-25T13:40:30.283Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 68c9162ccc29f8f3ca30be36950cea58.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'S52qxOGBb70uo_GiZrrWq2uvW29Pwxa_-4b-8x971JCCpnL3avvrJg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:31 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeoqYd-3NKUce-984aef0b28035967', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aef0b28035967-IAD', 'etag': 'W/"364-gLpd6MFHXWwd7BfPv5+vFaFgQis"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:30.765Z', 'x-api-call-start': '2025-09-25T13:40:30.293Z', 'x-api-received': '2025-09-25T13:40:30.283Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 68c9162ccc29f8f3ca30be36950cea58.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'S52qxOGBb70uo_GiZrrWq2uvW29Pwxa_-4b-8x971JCCpnL3avvrJg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeoqYd-3NKUce-984aef0b28035967
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Google Chorme.' took 1.06s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Google Chrome', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0011c308-7b23-480a-bde9-296c2f93955f', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Launch chrome browser.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3045E70>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3045D20>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:36 GMT'), (b'x-ratelimit-remaining-tokens', b'31234'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeosQ3-62bZhn-984aef2fdadc8e40'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aef2fdadc8e40-IAD'), (b'etag', b'W/"35d-091ria36Xpyzip/6AV/wJNkvPgk"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:36.877Z'), (b'x-api-call-start', b'2025-09-25T13:40:36.520Z'), (b'x-api-received', b'2025-09-25T13:40:36.512Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 42c937f806e6e43029a719b83b9a8612.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'hDJMz9ApSvRAg_X4_en83GRwsHHq9ExnMFp5OOAK6sHLxzPHVHZ7nw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:36 GMT', 'x-ratelimit-remaining-tokens': '31234', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeosQ3-62bZhn-984aef2fdadc8e40', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aef2fdadc8e40-IAD', 'etag': 'W/"35d-091ria36Xpyzip/6AV/wJNkvPgk"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:36.877Z', 'x-api-call-start': '2025-09-25T13:40:36.520Z', 'x-api-received': '2025-09-25T13:40:36.512Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 42c937f806e6e43029a719b83b9a8612.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'hDJMz9ApSvRAg_X4_en83GRwsHHq9ExnMFp5OOAK6sHLxzPHVHZ7nw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeosQ3-62bZhn-984aef2fdadc8e40
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Launch chrome browser.' took 0.67s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'chrome', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-eafaa2e9-3ce4-454c-849b-3f3eb859eccf', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Firefox.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30BF670>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30BE500>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:42 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeou6k-66dFFu-984aef539a880838'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aef539a880838-IAD'), (b'etag', b'W/"35d-7t5jEUWssjHXHWffOyQrWiTynDI"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:42.646Z'), (b'x-api-call-start', b'2025-09-25T13:40:42.247Z'), (b'x-api-received', b'2025-09-25T13:40:42.237Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 a1a9ff59f73590e3953b5ce6edfc8aa8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'nce8f7rsHIV6QbrjX9N23C5thF3_OA0Vy--IUsiuHLxjBGJTnOdkZw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:42 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeou6k-66dFFu-984aef539a880838', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aef539a880838-IAD', 'etag': 'W/"35d-7t5jEUWssjHXHWffOyQrWiTynDI"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:42.646Z', 'x-api-call-start': '2025-09-25T13:40:42.247Z', 'x-api-received': '2025-09-25T13:40:42.237Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 a1a9ff59f73590e3953b5ce6edfc8aa8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'nce8f7rsHIV6QbrjX9N23C5thF3_OA0Vy--IUsiuHLxjBGJTnOdkZw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeou6k-66dFFu-984aef539a880838
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Firefox.' took 0.77s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Firefox', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-12cf9dab-6ee6-4509-961c-5064e90588a7', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Start Notepad.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3112260>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3111E40>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:48 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeovof-62bZhn-984aef77894af685'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aef77894af685-IAD'), (b'etag', b'W/"35e-ROat81nkHMdlhDOY9GCMNc45i94"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:48.349Z'), (b'x-api-call-start', b'2025-09-25T13:40:47.982Z'), (b'x-api-received', b'2025-09-25T13:40:47.974Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'64W1V5dGoS7l5TAlddkfKM4bTlJ5FZEMJcoslF9Qd4yhXLmRWlJy_g==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:48 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeovof-62bZhn-984aef77894af685', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aef77894af685-IAD', 'etag': 'W/"35e-ROat81nkHMdlhDOY9GCMNc45i94"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:48.349Z', 'x-api-call-start': '2025-09-25T13:40:47.982Z', 'x-api-received': '2025-09-25T13:40:47.974Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '64W1V5dGoS7l5TAlddkfKM4bTlJ5FZEMJcoslF9Qd4yhXLmRWlJy_g=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeovof-62bZhn-984aef77894af685
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Start Notepad.' took 0.70s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Notepad', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7c8f7bb7-0540-40e9-90de-6a1a88ab4a4b', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Launch calc.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30BF8E0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30BF760>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:54 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeoxXf-66dFFu-984aef9b0b8ae62b'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aef9b0b8ae62b-IAD'), (b'etag', b'W/"35b-Y+wiR2/yJBY0/FffktN92qI4oMQ"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:54.168Z'), (b'x-api-call-start', b'2025-09-25T13:40:53.784Z'), (b'x-api-received', b'2025-09-25T13:40:53.774Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 191181f299c93f856cc1cdad79c1bb76.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'VSizdNSRXYeltQiHuFn-2_HbDSzNQLAZAQe5sVONThPilS31QbRSeA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:54 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeoxXf-66dFFu-984aef9b0b8ae62b', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aef9b0b8ae62b-IAD', 'etag': 'W/"35b-Y+wiR2/yJBY0/FffktN92qI4oMQ"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:54.168Z', 'x-api-call-start': '2025-09-25T13:40:53.784Z', 'x-api-received': '2025-09-25T13:40:53.774Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 191181f299c93f856cc1cdad79c1bb76.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'VSizdNSRXYeltQiHuFn-2_HbDSzNQLAZAQe5sVONThPilS31QbRSeA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeoxXf-66dFFu-984aef9b0b8ae62b
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Launch calc.' took 0.78s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'calc', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-abe4c269-b73a-42aa-b9b4-12d120f52679', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open VLC.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:40:59 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCeozD2-66dFFu-984aefbf09b51de9'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aefbf09b51de9-IAD'), (b'etag', b'W/"359-sUBPrHPyboTQauWU5Fd4W2QLsug"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:40:59.781Z'), (b'x-api-call-start', b'2025-09-25T13:40:59.431Z'), (b'x-api-received', b'2025-09-25T13:40:59.421Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 191181f299c93f856cc1cdad79c1bb76.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'DqiQJNGaVkgJxOt-W2hBfeQJzqrOd968zcF51eb1Rbfj0jRUAN-Emg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:40:59 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCeozD2-66dFFu-984aefbf09b51de9', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aefbf09b51de9-IAD', 'etag': 'W/"359-sUBPrHPyboTQauWU5Fd4W2QLsug"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:40:59.781Z', 'x-api-call-start': '2025-09-25T13:40:59.431Z', 'x-api-received': '2025-09-25T13:40:59.421Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 191181f299c93f856cc1cdad79c1bb76.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'DqiQJNGaVkgJxOt-W2hBfeQJzqrOd968zcF51eb1Rbfj0jRUAN-Emg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCeozD2-66dFFu-984aefbf09b51de9
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open VLC.' took 0.62s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'VLC', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6037aaf3-95ad-404e-9277-7ad413ca4292', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Start Spotify.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3140E50>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3140A30>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:05 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCep1u4-62bZhn-984aefe26e2ac94c'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984aefe26e2ac94c-IAD'), (b'etag', b'W/"35e-LQXYRQ5CLc8EaGW8kHIonTUXuAc"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:05.476Z'), (b'x-api-call-start', b'2025-09-25T13:41:05.119Z'), (b'x-api-received', b'2025-09-25T13:41:05.107Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 1a8de953aa4aaf678d8f6dfdeeea9a46.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'hcz8Y7uejJDn7XSZRSqKkEIMw2_kODIYgPyMrA7xkrxxvGsfkOc1Rg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:05 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCep1u4-62bZhn-984aefe26e2ac94c', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984aefe26e2ac94c-IAD', 'etag': 'W/"35e-LQXYRQ5CLc8EaGW8kHIonTUXuAc"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:05.476Z', 'x-api-call-start': '2025-09-25T13:41:05.119Z', 'x-api-received': '2025-09-25T13:41:05.107Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 1a8de953aa4aaf678d8f6dfdeeea9a46.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'hcz8Y7uejJDn7XSZRSqKkEIMw2_kODIYgPyMrA7xkrxxvGsfkOc1Rg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCep1u4-62bZhn-984aefe26e2ac94c
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Start Spotify.' took 0.69s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Spotify', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-073d98f1-5c81-4a94-9f24-15c8eaff9ca7', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Adobe Reader.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3142BC0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31427A0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:11 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCep3cE-66dFFu-984af0068fc62d1d'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af0068fc62d1d-IAD'), (b'etag', b'W/"362-Cr4XSbfsodwJMrhPao0MxXrBY9A"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:11.267Z'), (b'x-api-call-start', b'2025-09-25T13:41:10.872Z'), (b'x-api-received', b'2025-09-25T13:41:10.859Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'oo907LCBcHa3sQRau4LzjC1vfL62KwGwVJ3AuiasG4Ek-SAbxIfIpQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:11 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCep3cE-66dFFu-984af0068fc62d1d', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af0068fc62d1d-IAD', 'etag': 'W/"362-Cr4XSbfsodwJMrhPao0MxXrBY9A"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:11.267Z', 'x-api-call-start': '2025-09-25T13:41:10.872Z', 'x-api-received': '2025-09-25T13:41:10.859Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'oo907LCBcHa3sQRau4LzjC1vfL62KwGwVJ3AuiasG4Ek-SAbxIfIpQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCep3cE-66dFFu-984af0068fc62d1d
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Adobe Reader.' took 0.78s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Adobe Reader', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a540f284-e81c-4ce8-91ab-af1b470e6111', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Launch Acrobat.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:17 GMT'), (b'x-ratelimit-remaining-tokens', b'33183'), (b'x-ratelimit-reset', b'1'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCep5DW-3NKUce-984af029ecbac595'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af029ecbac595-IAD'), (b'etag', b'W/"35e-N23wRP19kzCsXzfS6TaplN277Sg"'), (b'retry-after', b'1'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:16.694Z'), (b'x-api-call-start', b'2025-09-25T13:41:16.279Z'), (b'x-api-received', b'2025-09-25T13:41:16.269Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'198'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'7Ijev5Hj98f4bAmbrTbkYVmshcx-vrDBcL2RhLsC6t8pEn4LJxOwZw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:17 GMT', 'x-ratelimit-remaining-tokens': '33183', 'x-ratelimit-reset': '1', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCep5DW-3NKUce-984af029ecbac595', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af029ecbac595-IAD', 'etag': 'W/"35e-N23wRP19kzCsXzfS6TaplN277Sg"', 'retry-after': '1', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:16.694Z', 'x-api-call-start': '2025-09-25T13:41:16.279Z', 'x-api-received': '2025-09-25T13:41:16.269Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '198', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '7Ijev5Hj98f4bAmbrTbkYVmshcx-vrDBcL2RhLsC6t8pEn4LJxOwZw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCep5DW-3NKUce-984af029ecbac595
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Launch Acrobat.' took 0.69s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Acrobat', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-fc43ea6f-49ec-46d3-a0df-f4491a0cde57', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Slack.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:22 GMT'), (b'x-ratelimit-remaining-tokens', b'32550'), (b'x-ratelimit-reset', b'1'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCep6zW-62bZhn-984af04d9b2e38fe'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af04d9b2e38fe-IAD'), (b'etag', b'W/"35c-oMhDEQkcx1VpNeRpSU9J5Ghqtqg"'), (b'retry-after', b'1'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:22.646Z'), (b'x-api-call-start', b'2025-09-25T13:41:22.259Z'), (b'x-api-received', b'2025-09-25T13:41:22.248Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'198'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'FBCXgCs3H80LJpd-0X0XOavcZciCkPtgSKZwweynBa-2CQqwyb752g==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:22 GMT', 'x-ratelimit-remaining-tokens': '32550', 'x-ratelimit-reset': '1', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCep6zW-62bZhn-984af04d9b2e38fe', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af04d9b2e38fe-IAD', 'etag': 'W/"35c-oMhDEQkcx1VpNeRpSU9J5Ghqtqg"', 'retry-after': '1', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:22.646Z', 'x-api-call-start': '2025-09-25T13:41:22.259Z', 'x-api-received': '2025-09-25T13:41:22.248Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '198', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'FBCXgCs3H80LJpd-0X0XOavcZciCkPtgSKZwweynBa-2CQqwyb752g=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCep6zW-62bZhn-984af04d9b2e38fe
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Slack.' took 0.68s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Slack', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-5dbb5157-2ff3-43d6-8905-369fcbbda462', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Start MS Teams.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D317D720>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D317D300>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:28 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCep8go-66dFFu-984af0715f6d5973'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af0715f6d5973-IAD'), (b'etag', b'W/"35d-X8snW6DVEBR0tcS/xkIr1Iu/BrI"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:28.259Z'), (b'x-api-call-start', b'2025-09-25T13:41:27.956Z'), (b'x-api-received', b'2025-09-25T13:41:27.944Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'810NaWFp8UQ6j_wmLCCNt6ad3XrvvZfPHwlAjDw6insbiF8N1kMq9w==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:28 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCep8go-66dFFu-984af0715f6d5973', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af0715f6d5973-IAD', 'etag': 'W/"35d-X8snW6DVEBR0tcS/xkIr1Iu/BrI"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:28.259Z', 'x-api-call-start': '2025-09-25T13:41:27.956Z', 'x-api-received': '2025-09-25T13:41:27.944Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 f355844b811a4a5ec94df0918f0fb80c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '810NaWFp8UQ6j_wmLCCNt6ad3XrvvZfPHwlAjDw6insbiF8N1kMq9w=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCep8go-66dFFu-984af0715f6d5973
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Start MS Teams.' took 0.58s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'MS Teams', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-fe096172-3aa4-4218-bf1d-3db1efb7e428', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Outlok.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D3113580>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D30BDCF0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:34 GMT'), (b'x-ratelimit-remaining-tokens', b'32429'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepAJB-3NKUce-984af09468341329'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af09468341329-IAD'), (b'etag', b'W/"35e-K7f/A0jAlKPl+TaYOq6e1I/5+FE"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:33.748Z'), (b'x-api-call-start', b'2025-09-25T13:41:33.370Z'), (b'x-api-received', b'2025-09-25T13:41:33.361Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 2c1fa76ea6af6e9212cf3e52e166c4ce.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'AlKMD13pGVaa7zr2qtR9bs57QmjzHqXbiI9m1h54sSnWD2Xn_U3meg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:34 GMT', 'x-ratelimit-remaining-tokens': '32429', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepAJB-3NKUce-984af09468341329', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af09468341329-IAD', 'etag': 'W/"35e-K7f/A0jAlKPl+TaYOq6e1I/5+FE"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:33.748Z', 'x-api-call-start': '2025-09-25T13:41:33.370Z', 'x-api-received': '2025-09-25T13:41:33.361Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 2c1fa76ea6af6e9212cf3e52e166c4ce.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'AlKMD13pGVaa7zr2qtR9bs57QmjzHqXbiI9m1h54sSnWD2Xn_U3meg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepAJB-3NKUce-984af09468341329
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Outlok.' took 0.70s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Outlook', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-f74470a2-7103-4a90-9091-ce50dde45c77', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Launch Word.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D317EF80>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D317EB60>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:39 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepC3q-62bZhn-984af0b7f98fd6af'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af0b7f98fd6af-IAD'), (b'etag', b'W/"35b-YXaskqdVhLLLb5V9KT4sN9iLp3w"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:39.584Z'), (b'x-api-call-start', b'2025-09-25T13:41:39.266Z'), (b'x-api-received', b'2025-09-25T13:41:39.257Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'j9QDHwERkFc9eDeoY-4_PbSzPjDzj6zKlqfL7t0_wnyjiBic0-fPYA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:39 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepC3q-62bZhn-984af0b7f98fd6af', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af0b7f98fd6af-IAD', 'etag': 'W/"35b-YXaskqdVhLLLb5V9KT4sN9iLp3w"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:39.584Z', 'x-api-call-start': '2025-09-25T13:41:39.266Z', 'x-api-received': '2025-09-25T13:41:39.257Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 07b26b5e851ab857ec87e6df0aa7882e.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'j9QDHwERkFc9eDeoY-4_PbSzPjDzj6zKlqfL7t0_wnyjiBic0-fPYA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepC3q-62bZhn-984af0b7f98fd6af
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Launch Word.' took 0.63s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Word', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-0aa93401-14aa-4ae4-bdbe-53299e6bf105', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Excel.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31A4D30>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31A4910>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:45 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepDjN-66dFFu-984af0db4ff0d68f'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af0db4ff0d68f-IAD'), (b'etag', b'W/"35c-mYkTb9tU++/RuU/gfpjkdZCHSDE"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:45.289Z'), (b'x-api-call-start', b'2025-09-25T13:41:44.924Z'), (b'x-api-received', b'2025-09-25T13:41:44.913Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'RzDoiOiljo1P7BwuZOeQvZSqwWM6HpCpSvYZtxX_hAcsXxDRhVKiuw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:45 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepDjN-66dFFu-984af0db4ff0d68f', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af0db4ff0d68f-IAD', 'etag': 'W/"35c-mYkTb9tU++/RuU/gfpjkdZCHSDE"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:45.289Z', 'x-api-call-start': '2025-09-25T13:41:44.924Z', 'x-api-received': '2025-09-25T13:41:44.913Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'RzDoiOiljo1P7BwuZOeQvZSqwWM6HpCpSvYZtxX_hAcsXxDRhVKiuw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepDjN-66dFFu-984af0db4ff0d68f
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Excel.' took 0.68s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Excel', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ca1bdee3-e64f-4709-a06b-c684b3fbd87a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Start Power Point.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:50 GMT'), (b'x-ratelimit-remaining-tokens', b'32935'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepFQX-62bZhn-984af0fe9b522058'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af0fe9b522058-IAD'), (b'etag', b'W/"362-sZPYnsEOi+lG6sEZHOc5WbDPSkU"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:50.927Z'), (b'x-api-call-start', b'2025-09-25T13:41:50.557Z'), (b'x-api-received', b'2025-09-25T13:41:50.548Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'Xm8AAb6SVBWffie9zc9DU_mdFc7Gah400bFbR-93QWVXH8dZNS_qdg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:50 GMT', 'x-ratelimit-remaining-tokens': '32935', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepFQX-62bZhn-984af0fe9b522058', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af0fe9b522058-IAD', 'etag': 'W/"362-sZPYnsEOi+lG6sEZHOc5WbDPSkU"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:50.927Z', 'x-api-call-start': '2025-09-25T13:41:50.557Z', 'x-api-received': '2025-09-25T13:41:50.548Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'Xm8AAb6SVBWffie9zc9DU_mdFc7Gah400bFbR-93QWVXH8dZNS_qdg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepFQX-62bZhn-984af0fe9b522058
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Start Power Point.' took 0.65s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Power Point', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7cde78ea-4cf6-497f-b9e5-160bcb2fde71', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Paint.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:41:56 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepH6Q-66dFFu-984af121ea8bd644'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af121ea8bd644-IAD'), (b'etag', b'W/"35b-6IeSkcYVz049TAJMZbhYcANwAuA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:41:56.594Z'), (b'x-api-call-start', b'2025-09-25T13:41:56.235Z'), (b'x-api-received', b'2025-09-25T13:41:56.226Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'MszQ86BVFAl1Zn8MuKpdUYPdNer_fSvVmU3rAaoHQbxXR8f2_jWYVA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:41:56 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepH6Q-66dFFu-984af121ea8bd644', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af121ea8bd644-IAD', 'etag': 'W/"35b-6IeSkcYVz049TAJMZbhYcANwAuA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:41:56.594Z', 'x-api-call-start': '2025-09-25T13:41:56.235Z', 'x-api-received': '2025-09-25T13:41:56.226Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'MszQ86BVFAl1Zn8MuKpdUYPdNer_fSvVmU3rAaoHQbxXR8f2_jWYVA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepH6Q-66dFFu-984af121ea8bd644
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Paint.' took 0.64s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Paint', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c1cfb50b-2af6-4878-b933-a7e89430c19c', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Start Edge browser.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31A77F0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31A73D0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:42:02 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepJo7-62bZhn-984af145b9ad8203'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af145b9ad8203-IAD'), (b'etag', b'W/"35a-8tiWApIkNoeh/yA2blxxWg0784o"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:42:02.276Z'), (b'x-api-call-start', b'2025-09-25T13:42:01.960Z'), (b'x-api-received', b'2025-09-25T13:42:01.951Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'vX10U5RUf6Rs5TniObiyvhBiOsTL7YlsazJKaRFuE1GuVOt3gYwv0Q==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:42:02 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepJo7-62bZhn-984af145b9ad8203', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af145b9ad8203-IAD', 'etag': 'W/"35a-8tiWApIkNoeh/yA2blxxWg0784o"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:42:02.276Z', 'x-api-call-start': '2025-09-25T13:42:01.960Z', 'x-api-received': '2025-09-25T13:42:01.951Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'vX10U5RUf6Rs5TniObiyvhBiOsTL7YlsazJKaRFuE1GuVOt3gYwv0Q=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepJo7-62bZhn-984af145b9ad8203
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Start Edge browser.' took 0.71s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Edge', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d50871b4-6730-4925-a418-3052b9f4b4ff', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Launch Git Extensions.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D317D540>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D317F040>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:42:08 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepLUm-66dFFu-984af1692c94b208'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af1692c94b208-IAD'), (b'etag', b'W/"364-O2y4J4YVuhC8FYKHWsRU/q70HKE"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:42:07.972Z'), (b'x-api-call-start', b'2025-09-25T13:42:07.626Z'), (b'x-api-received', b'2025-09-25T13:42:07.615Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'mFSRs-w2yaaOxNw3F48RkZPXasppnNxgi_3xVKSOClFlqAFY-zKpdg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:42:08 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepLUm-66dFFu-984af1692c94b208', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af1692c94b208-IAD', 'etag': 'W/"364-O2y4J4YVuhC8FYKHWsRU/q70HKE"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:42:07.972Z', 'x-api-call-start': '2025-09-25T13:42:07.626Z', 'x-api-received': '2025-09-25T13:42:07.615Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'mFSRs-w2yaaOxNw3F48RkZPXasppnNxgi_3xVKSOClFlqAFY-zKpdg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepLUm-66dFFu-984af1692c94b208
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Launch Git Extensions.' took 0.65s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Git Extensions', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-53fee445-6c50-456d-9809-6e98f71d0915', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open 7Zip.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31A43A0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31A4550>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:42:13 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepNM8-3NKUce-984af18c9bee20be'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af18c9bee20be-IAD'), (b'etag', b'W/"35b-7kevGyK03jqzpDSjWKO9zfX3TLU"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:42:14.212Z'), (b'x-api-call-start', b'2025-09-25T13:42:13.910Z'), (b'x-api-received', b'2025-09-25T13:42:13.900Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'Q6FIc9WhEa1LsPbI0AIpqKJQeNQp5RZnXtSKQI4thAM8TjJmjEhrDg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:42:13 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepNM8-3NKUce-984af18c9bee20be', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af18c9bee20be-IAD', 'etag': 'W/"35b-7kevGyK03jqzpDSjWKO9zfX3TLU"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:42:14.212Z', 'x-api-call-start': '2025-09-25T13:42:13.910Z', 'x-api-received': '2025-09-25T13:42:13.900Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'Q6FIc9WhEa1LsPbI0AIpqKJQeNQp5RZnXtSKQI4thAM8TjJmjEhrDg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepNM8-3NKUce-984af18c9bee20be
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open 7Zip.' took 0.67s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': '7Zip', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-7cf46046-cb29-4d89-9bac-9bc7198a7ed7', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Start IntelliJ.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:42:19 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepPsL-62bZhn-984af1b07a50efbc'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af1b07a50efbc-IAD'), (b'etag', b'W/"35e-RU9RyE0mt5c2NiwhbKeZowp9Dpc"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:42:19.375Z'), (b'x-api-call-start', b'2025-09-25T13:42:19.024Z'), (b'x-api-received', b'2025-09-25T13:42:19.016Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'UdqviFnuNlUblzHdlH6tu288tPZZQjLKVeE2Jg5R3r3f-3csLtab9Q==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:42:19 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepPsL-62bZhn-984af1b07a50efbc', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af1b07a50efbc-IAD', 'etag': 'W/"35e-RU9RyE0mt5c2NiwhbKeZowp9Dpc"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:42:19.375Z', 'x-api-call-start': '2025-09-25T13:42:19.024Z', 'x-api-received': '2025-09-25T13:42:19.016Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'UdqviFnuNlUblzHdlH6tu288tPZZQjLKVeE2Jg5R3r3f-3csLtab9Q=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepPsL-62bZhn-984af1b07a50efbc
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Start IntelliJ.' took 0.74s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'IntelliJ', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-6a62a685-c8ca-43b5-951d-74e5405207d3', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Open Pychram.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31D6920>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002D9D1713DC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002D9D31D6500>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:42:25 GMT'), (b'x-ratelimit-remaining-tokens', b'33212'), (b'x-ratelimit-reset', b'0'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepRjs-3NKUce-984af1d40b785a51'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af1d40b785a51-IAD'), (b'etag', b'W/"35c-HcwBXP6qvtmTR6tag1oG7xgz+bw"'), (b'retry-after', b'0'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:42:25.667Z'), (b'x-api-call-start', b'2025-09-25T13:42:25.323Z'), (b'x-api-received', b'2025-09-25T13:42:25.311Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'198'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'myQv92fTpDPGBmdJJmjtoBdKCxvbWl0dt45V_6wlfvHkl87xgQjZoA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:42:25 GMT', 'x-ratelimit-remaining-tokens': '33212', 'x-ratelimit-reset': '0', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepRjs-3NKUce-984af1d40b785a51', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af1d40b785a51-IAD', 'etag': 'W/"35c-HcwBXP6qvtmTR6tag1oG7xgz+bw"', 'retry-after': '0', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:42:25.667Z', 'x-api-call-start': '2025-09-25T13:42:25.323Z', 'x-api-received': '2025-09-25T13:42:25.311Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '198', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'myQv92fTpDPGBmdJJmjtoBdKCxvbWl0dt45V_6wlfvHkl87xgQjZoA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepRjs-3NKUce-984af1d40b785a51
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Open Pychram.' took 0.69s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'PyChram', 'is_sure_after_multiple_matches': False})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-d77a849d-b6ee-4893-824b-17f45d90a737', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Launch Android Studio.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Thu, 25 Sep 2025 13:42:30 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCepTEn-66dFFu-984af1f75ff9d64d'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984af1f75ff9d64d-IAD'), (b'etag', b'W/"365-iJuBM9Sp+ITZYnqF3gbSEw2AL+0"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-25T13:42:30.684Z'), (b'x-api-call-start', b'2025-09-25T13:42:30.361Z'), (b'x-api-received', b'2025-09-25T13:42:30.352Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'xt3yneKpmnjGd9K5qXSB-S6m0Q1KMuZbSmpPwz3PiVdETHXo2OMF9Q==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Thu, 25 Sep 2025 13:42:30 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCepTEn-66dFFu-984af1f75ff9d64d', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984af1f75ff9d64d-IAD', 'etag': 'W/"365-iJuBM9Sp+ITZYnqF3gbSEw2AL+0"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-25T13:42:30.684Z', 'x-api-call-start': '2025-09-25T13:42:30.361Z', 'x-api-received': '2025-09-25T13:42:30.352Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'xt3yneKpmnjGd9K5qXSB-S6m0Q1KMuZbSmpPwz3PiVdETHXo2OMF9Q=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCepTEn-66dFFu-984af1f75ff9d64d
DEBUG    test_performance:test_performance.py:410 Launch application conversation 'Launch Android Studio.' took 0.57s with response: 
LLMResponse(type='function_call', content=None, function='launch_application', module='os', arguments={'app_name': 'Android Studio', 'is_sure_after_multiple_matches': False})


