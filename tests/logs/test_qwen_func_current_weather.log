DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-b8e07ffc-295b-4621-bc0a-78cfaf808303', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current weather at 40.7128, -74.0060?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E394AC0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E3947C0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:34:45 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKkb8-62bZhn-9846181faaaf07bd'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'9846181faaaf07bd-IAD'), (b'etag', b'W/"36d-OB+TJDJo/dfaqHre/MR3PYWscaA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:34:44.956Z'), (b'x-api-call-start', b'2025-09-24T23:34:44.496Z'), (b'x-api-received', b'2025-09-24T23:34:44.488Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'P_CdmmBNogQ2axPJ0olKrXOIa3qJVGrqyPBqIXDyeuxUjamaaCPmBw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:34:45 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKkb8-62bZhn-9846181faaaf07bd', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '9846181faaaf07bd-IAD', 'etag': 'W/"36d-OB+TJDJo/dfaqHre/MR3PYWscaA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:34:44.956Z', 'x-api-call-start': '2025-09-24T23:34:44.496Z', 'x-api-received': '2025-09-24T23:34:44.488Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'P_CdmmBNogQ2axPJ0olKrXOIa3qJVGrqyPBqIXDyeuxUjamaaCPmBw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKkb8-62bZhn-9846181faaaf07bd
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Current weather at 40.7128, -74.0060?' took 1.60s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': 40.7128, 'lon': -74.006, 'units': 'standard'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c6b53100-2697-4e98-ba58-e4f68cf7bfb5', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's it like now near -33.8688, 151.2093 (Sydny)?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E396950>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E3963B0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:34:51 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKnLK-66dFFu-984618441a6eef62'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984618441a6eef62-IAD'), (b'etag', b'W/"36d-S0qRov6oQHvUtPQMfUoBEUZjoz4"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:34:51.038Z'), (b'x-api-call-start', b'2025-09-24T23:34:50.368Z'), (b'x-api-received', b'2025-09-24T23:34:50.357Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'KZ8POHkXjLo-gu-lnpE3fgvJh8-2iYY2ThIvy6F2VrCH3SAUM1b5HA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:34:51 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKnLK-66dFFu-984618441a6eef62', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984618441a6eef62-IAD', 'etag': 'W/"36d-S0qRov6oQHvUtPQMfUoBEUZjoz4"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:34:51.038Z', 'x-api-call-start': '2025-09-24T23:34:50.368Z', 'x-api-received': '2025-09-24T23:34:50.357Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'KZ8POHkXjLo-gu-lnpE3fgvJh8-2iYY2ThIvy6F2VrCH3SAUM1b5HA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKnLK-66dFFu-984618441a6eef62
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'What's it like now near -33.8688, 151.2093 (Sydny)?' took 1.05s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': -33.8688, 'lon': 151.2093, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ca5d4a96-992e-4c31-b0b4-2f248e2b61f8', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Weather rn at -23.5505, -46.6333.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:34:57 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKp9F-3NKUce-98461869a90b16de'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461869a90b16de-IAD'), (b'etag', b'W/"36c-u2wE/3pzEPT6pr44+ucq45NJkKQ"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:34:57.103Z'), (b'x-api-call-start', b'2025-09-24T23:34:56.461Z'), (b'x-api-received', b'2025-09-24T23:34:56.443Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'74rUpJpQhhJqeOTYqv4sUHUlTamTAqxysa9IlzhA1C11-DV1n98yFw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:34:57 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKp9F-3NKUce-98461869a90b16de', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461869a90b16de-IAD', 'etag': 'W/"36c-u2wE/3pzEPT6pr44+ucq45NJkKQ"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:34:57.103Z', 'x-api-call-start': '2025-09-24T23:34:56.461Z', 'x-api-received': '2025-09-24T23:34:56.443Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '74rUpJpQhhJqeOTYqv4sUHUlTamTAqxysa9IlzhA1C11-DV1n98yFw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKp9F-3NKUce-98461869a90b16de
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Weather rn at -23.5505, -46.6333.' took 0.94s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': -23.5505, 'lon': -46.6333, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-cf56ab3a-5ee5-4242-94be-75d90b957420', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Temp & conditions at 30.0444, 31.2357 please.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:03 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKquJ-62bZhn-9846188eca688281'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'9846188eca688281-IAD'), (b'etag', b'W/"36b-cUzmtuYhZPHBcEXuWEaGeVRbBYE"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:02.980Z'), (b'x-api-call-start', b'2025-09-24T23:35:02.369Z'), (b'x-api-received', b'2025-09-24T23:35:02.362Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'yL5JKhNdjpMquiExnAQ3qR8kHsfRyEI2FoJ5dxbfsmkUjbb65vpIaQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:03 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKquJ-62bZhn-9846188eca688281', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '9846188eca688281-IAD', 'etag': 'W/"36b-cUzmtuYhZPHBcEXuWEaGeVRbBYE"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:02.980Z', 'x-api-call-start': '2025-09-24T23:35:02.369Z', 'x-api-received': '2025-09-24T23:35:02.362Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5a9df1bcd5f48109e94a8e34d807b686.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'yL5JKhNdjpMquiExnAQ3qR8kHsfRyEI2FoJ5dxbfsmkUjbb65vpIaQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKquJ-62bZhn-9846188eca688281
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Temp & conditions at 30.0444, 31.2357 please.' took 0.98s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': 30.0444, 'lon': 31.2357, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-8fc19bc9-7f05-4a0a-93a0-5f26d03d7795', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's the current weather @ 55.7558, 37.6173?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E40E5C0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E40E1A0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:08 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKsiH-3NKUce-984618b46ed5c944'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984618b46ed5c944-IAD'), (b'etag', b'W/"369-57RT0XxdFSW0kk4b5RTLjPZkopQ"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:09.063Z'), (b'x-api-call-start', b'2025-09-24T23:35:08.462Z'), (b'x-api-received', b'2025-09-24T23:35:08.450Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'jSBqL8HO5F5A7g4VNJ_o9UINKFvgQi-lbkBx5ggeBSia7wPANgqfaQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:08 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKsiH-3NKUce-984618b46ed5c944', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984618b46ed5c944-IAD', 'etag': 'W/"369-57RT0XxdFSW0kk4b5RTLjPZkopQ"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:09.063Z', 'x-api-call-start': '2025-09-24T23:35:08.462Z', 'x-api-received': '2025-09-24T23:35:08.450Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'jSBqL8HO5F5A7g4VNJ_o9UINKFvgQi-lbkBx5ggeBSia7wPANgqfaQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKsiH-3NKUce-984618b46ed5c944
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'What's the current weather @ 55.7558, 37.6173?' took 0.90s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': 55.7558, 'lon': 37.6173, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-9bca7f50-982d-406c-999b-2bea0e3307f1', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Is it raining around -1.2921, 36.8219 right now?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E434370>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E40FF10>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:14 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKuRk-62bZhn-984618d9595186d6'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984618d9595186d6-IAD'), (b'etag', b'W/"36a-Ren0VrCZ6fxdTaCKMxQlQFPT30k"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:14.719Z'), (b'x-api-call-start', b'2025-09-24T23:35:14.228Z'), (b'x-api-received', b'2025-09-24T23:35:14.219Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 f13924e40949c7e0a5bd0c7e333695f2.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'oXw1YSnvTk6zJHTwazse5CxlGL2vyKdf0M-MpY40dDSfO1Vd8tbOeg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:14 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKuRk-62bZhn-984618d9595186d6', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984618d9595186d6-IAD', 'etag': 'W/"36a-Ren0VrCZ6fxdTaCKMxQlQFPT30k"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:14.719Z', 'x-api-call-start': '2025-09-24T23:35:14.228Z', 'x-api-received': '2025-09-24T23:35:14.219Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 f13924e40949c7e0a5bd0c7e333695f2.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'oXw1YSnvTk6zJHTwazse5CxlGL2vyKdf0M-MpY40dDSfO1Vd8tbOeg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKuRk-62bZhn-984618d9595186d6
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Is it raining around -1.2921, 36.8219 right now?' took 0.82s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': -1.2921, 'lon': 36.8219, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-186b001c-063f-4237-8b77-a6dcccd5922e', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'How cold is it near 64.1466, -21.9426?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:20 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKw9g-62bZhn-984618fd8fa69c70'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984618fd8fa69c70-IAD'), (b'etag', b'W/"36b-OroXajlk8J1JMnUYQ93/7HT38EY"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:20.580Z'), (b'x-api-call-start', b'2025-09-24T23:35:20.025Z'), (b'x-api-received', b'2025-09-24T23:35:20.016Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 f13924e40949c7e0a5bd0c7e333695f2.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'rlEQnQVZMpc2pNTgTfUTBk6NFxvACaWzBkxQWvaLCNC60KnAksWSBA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:20 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKw9g-62bZhn-984618fd8fa69c70', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984618fd8fa69c70-IAD', 'etag': 'W/"36b-OroXajlk8J1JMnUYQ93/7HT38EY"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:20.580Z', 'x-api-call-start': '2025-09-24T23:35:20.025Z', 'x-api-received': '2025-09-24T23:35:20.016Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 f13924e40949c7e0a5bd0c7e333695f2.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'rlEQnQVZMpc2pNTgTfUTBk6NFxvACaWzBkxQWvaLCNC60KnAksWSBA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKw9g-62bZhn-984618fd8fa69c70
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'How cold is it near 64.1466, -21.9426?' took 0.87s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': 64.1466, 'lon': -21.9426, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-41978ae6-704f-4bdc-8475-8380659b536a', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current wind & temp for -33.9249, 18.4241.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E434070>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E40E3E0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:26 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKxuD-62bZhn-984619227c320575'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984619227c320575-IAD'), (b'etag', b'W/"36c-3aKnNMib8sODOdxUv41PA/HrpO8"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:26.520Z'), (b'x-api-call-start', b'2025-09-24T23:35:25.913Z'), (b'x-api-received', b'2025-09-24T23:35:25.904Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 2982304f906b538b26d5fd128f6030ec.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'h2F35wXK76DcStrBDLQ9MXfoYLl7FIrdapt5cgKm8S9VWNnPRq0PFg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:26 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKxuD-62bZhn-984619227c320575', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984619227c320575-IAD', 'etag': 'W/"36c-3aKnNMib8sODOdxUv41PA/HrpO8"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:26.520Z', 'x-api-call-start': '2025-09-24T23:35:25.913Z', 'x-api-received': '2025-09-24T23:35:25.904Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 2982304f906b538b26d5fd128f6030ec.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'h2F35wXK76DcStrBDLQ9MXfoYLl7FIrdapt5cgKm8S9VWNnPRq0PFg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKxuD-62bZhn-984619227c320575
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Current wind & temp for -33.9249, 18.4241.' took 0.94s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': -33.9249, 'lon': 18.4241, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ad56d6ee-58d5-4cb0-95b1-fde4d605fc50', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Weather now at 35.6895, 139.6917 (Tokio)?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E437250>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E436E30>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:32 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaKzgP-66dFFu-984619479a00c655'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984619479a00c655-IAD'), (b'etag', b'W/"36c-qLvqRcW20tkKSZJFUL0uwgZsONg"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:32.588Z'), (b'x-api-call-start', b'2025-09-24T23:35:31.899Z'), (b'x-api-received', b'2025-09-24T23:35:31.889Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'SyqJjpXq4yOilWdSTZ4qDTWRkrPP_7UJmYtqEXyJ8I_99ZR4SLce0g==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:32 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaKzgP-66dFFu-984619479a00c655', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984619479a00c655-IAD', 'etag': 'W/"36c-qLvqRcW20tkKSZJFUL0uwgZsONg"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:32.588Z', 'x-api-call-start': '2025-09-24T23:35:31.899Z', 'x-api-received': '2025-09-24T23:35:31.889Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'SyqJjpXq4yOilWdSTZ4qDTWRkrPP_7UJmYtqEXyJ8I_99ZR4SLce0g=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaKzgP-66dFFu-984619479a00c655
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Weather now at 35.6895, 139.6917 (Tokio)?' took 1.05s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': 35.6895, 'lon': 139.6917, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-35dc85ab-8c90-450b-ae84-602d0580386e', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's the weather like at 38.7223, -9.1393?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E437FD0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E40E110>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:38 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaL2Te-66dFFu-9846196d6dad0813'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'9846196d6dad0813-IAD'), (b'etag', b'W/"36b-DEch7n6ce9tU5uRLs+/3yFErXR8"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:38.429Z'), (b'x-api-call-start', b'2025-09-24T23:35:37.887Z'), (b'x-api-received', b'2025-09-24T23:35:37.877Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 1a8de953aa4aaf678d8f6dfdeeea9a46.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'Jq1JHU52_FK1SpGYDTV4T6eav_zpkVsEzfhFw-oGIokD-w7gTu8Z3g==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:38 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaL2Te-66dFFu-9846196d6dad0813', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '9846196d6dad0813-IAD', 'etag': 'W/"36b-DEch7n6ce9tU5uRLs+/3yFErXR8"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:38.429Z', 'x-api-call-start': '2025-09-24T23:35:37.887Z', 'x-api-received': '2025-09-24T23:35:37.877Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 1a8de953aa4aaf678d8f6dfdeeea9a46.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'Jq1JHU52_FK1SpGYDTV4T6eav_zpkVsEzfhFw-oGIokD-w7gTu8Z3g=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaL2Te-66dFFu-9846196d6dad0813
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'What's the weather like at 38.7223, -9.1393?' took 0.83s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'lang': 'en', 'lat': 38.7223, 'lon': -9.1393, 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-71419f74-cba0-44eb-936b-4ec30e31ec89', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current weather for zip 10001, US.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E396380>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E395D80>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:44 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaL4JF-3NKUce-98461991e8742d1e'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461991e8742d1e-IAD'), (b'etag', b'W/"350-B9XUiYyebRh2Z6xYrnUZ2ey5Mms"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:44.421Z'), (b'x-api-call-start', b'2025-09-24T23:35:44.073Z'), (b'x-api-received', b'2025-09-24T23:35:44.060Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'nST35qJLsWNP2cSGlZoYNua4KTtvXVx-3lJj4e3VOS9vc7cIBisKiQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:44 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaL4JF-3NKUce-98461991e8742d1e', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461991e8742d1e-IAD', 'etag': 'W/"350-B9XUiYyebRh2Z6xYrnUZ2ey5Mms"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:44.421Z', 'x-api-call-start': '2025-09-24T23:35:44.073Z', 'x-api-received': '2025-09-24T23:35:44.060Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'nST35qJLsWNP2cSGlZoYNua4KTtvXVx-3lJj4e3VOS9vc7cIBisKiQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaL4JF-3NKUce-98461991e8742d1e
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Current weather for zip 10001, US.' took 0.66s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'US', 'zip': '10001'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-2463c164-bdab-4444-b003-134d528852bb', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Weather now at 90210, US?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E466230>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E465E10>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:50 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaL5w7-66dFFu-984619b59ffbd693'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984619b59ffbd693-IAD'), (b'etag', b'W/"376-obBxblpUDZwmKjmUGyZmjW/MqzM"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:50.071Z'), (b'x-api-call-start', b'2025-09-24T23:35:49.573Z'), (b'x-api-received', b'2025-09-24T23:35:49.562Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'7inC9h8lBjo5u1TojD1MLm3uVa7vJ9ZemPfmrhA_31svGg_f6y72WQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:50 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaL5w7-66dFFu-984619b59ffbd693', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984619b59ffbd693-IAD', 'etag': 'W/"376-obBxblpUDZwmKjmUGyZmjW/MqzM"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:50.071Z', 'x-api-call-start': '2025-09-24T23:35:49.573Z', 'x-api-received': '2025-09-24T23:35:49.562Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '7inC9h8lBjo5u1TojD1MLm3uVa7vJ9ZemPfmrhA_31svGg_f6y72WQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaL5w7-66dFFu-984619b59ffbd693
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Weather now at 90210, US?' took 0.99s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'US', 'lang': 'en', 'units': 'imperial', 'zip': '90210'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-efe478a5-4711-4fe7-850f-7ac437481259', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "How's Chicago right nowâ€”60614, US."}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E397F40>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E395CC0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:35:56 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaL7q3-3NKUce-984619dadfe22ac2'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'984619dadfe22ac2-IAD'), (b'etag', b'W/"377-XLpdUcS+FXmpSjDq4Sp7IbwETrQ"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:35:56.485Z'), (b'x-api-call-start', b'2025-09-24T23:35:55.950Z'), (b'x-api-received', b'2025-09-24T23:35:55.939Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'EsPw1er5E6c46GQ_n785GlsseXKCH36Tnzw5Dgu97iPljQ1iNY_IFA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:35:56 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaL7q3-3NKUce-984619dadfe22ac2', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '984619dadfe22ac2-IAD', 'etag': 'W/"377-XLpdUcS+FXmpSjDq4Sp7IbwETrQ"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:35:56.485Z', 'x-api-call-start': '2025-09-24T23:35:55.950Z', 'x-api-received': '2025-09-24T23:35:55.939Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 39ae765868f39f2168989dfa478b9354.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'EsPw1er5E6c46GQ_n785GlsseXKCH36Tnzw5Dgu97iPljQ1iNY_IFA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaL7q3-3NKUce-984619dadfe22ac2
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'How's Chicago right nowâ€”60614, US.' took 0.89s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'US', 'lang': 'en', 'units': 'imperial', 'zip': '60614'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-39399590-5eb0-48ff-acaa-a853529f8c12', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's it like at 10115, DE (Berlin)?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4658A0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4667D0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:02 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaL9VF-66dFFu-98461a0109985d13'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461a0109985d13-IAD'), (b'etag', b'W/"375-XzkWAinQr4kLsaXhsXepijwdq2s"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:02.037Z'), (b'x-api-call-start', b'2025-09-24T23:36:01.530Z'), (b'x-api-received', b'2025-09-24T23:36:01.518Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'Fd3Tuya7k9rwwSbmOPYbx4AbinCM5DPemuYY_SeSR4ewTU-oBRC_9Q==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:02 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaL9VF-66dFFu-98461a0109985d13', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461a0109985d13-IAD', 'etag': 'W/"375-XzkWAinQr4kLsaXhsXepijwdq2s"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:02.037Z', 'x-api-call-start': '2025-09-24T23:36:01.530Z', 'x-api-received': '2025-09-24T23:36:01.518Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 4ccea9891122bbc59cea4168a401fd44.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'Fd3Tuya7k9rwwSbmOPYbx4AbinCM5DPemuYY_SeSR4ewTU-oBRC_9Q=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaL9VF-66dFFu-98461a0109985d13
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'What's it like at 10115, DE (Berlin)?' took 1.06s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'DE', 'lang': 'en', 'units': 'metric', 'zip': '10115'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-87395438-831f-41f9-a667-a829cda7f323', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Weather for SW1A 1AA, GB (Buckingham)?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E499240>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E498E20>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:07 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLBEW-62bZhn-98461a25bd2538fb'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461a25bd2538fb-IAD'), (b'etag', b'W/"378-iVLMSnnZXpKVdAYF+axBC2hrA54"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:07.869Z'), (b'x-api-call-start', b'2025-09-24T23:36:07.402Z'), (b'x-api-received', b'2025-09-24T23:36:07.392Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 d8d835cce198f21656f532aa7cb25fbe.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'Wc6V2NJW3N_ouC5SxkWcxVHHZIH83m3ghzi4iTVzJAyrktA-JusHGg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:07 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLBEW-62bZhn-98461a25bd2538fb', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461a25bd2538fb-IAD', 'etag': 'W/"378-iVLMSnnZXpKVdAYF+axBC2hrA54"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:07.869Z', 'x-api-call-start': '2025-09-24T23:36:07.402Z', 'x-api-received': '2025-09-24T23:36:07.392Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 d8d835cce198f21656f532aa7cb25fbe.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'Wc6V2NJW3N_ouC5SxkWcxVHHZIH83m3ghzi4iTVzJAyrktA-JusHGg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLBEW-62bZhn-98461a25bd2538fb
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Weather for SW1A 1AA, GB (Buckingham)?' took 0.81s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'GB', 'lang': 'en', 'units': 'metric', 'zip': 'SW1A 1AA'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-348473d6-614d-4958-8ed3-45ff15030077', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Now in 75001, FR?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:13 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLCwe-62bZhn-98461a49da2aae2f'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461a49da2aae2f-IAD'), (b'etag', b'W/"375-wgTpLYvR8UQUkFIrVjIzNlW5pKE"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:13.633Z'), (b'x-api-call-start', b'2025-09-24T23:36:13.167Z'), (b'x-api-received', b'2025-09-24T23:36:13.154Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 d8d835cce198f21656f532aa7cb25fbe.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'CsYdlNdBxobnCXgjXk7EWZy5i2lcWgpMWfX05VVxngACUyOI6hF3Og==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:13 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLCwe-62bZhn-98461a49da2aae2f', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461a49da2aae2f-IAD', 'etag': 'W/"375-wgTpLYvR8UQUkFIrVjIzNlW5pKE"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:13.633Z', 'x-api-call-start': '2025-09-24T23:36:13.167Z', 'x-api-received': '2025-09-24T23:36:13.154Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 d8d835cce198f21656f532aa7cb25fbe.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'CsYdlNdBxobnCXgjXk7EWZy5i2lcWgpMWfX05VVxngACUyOI6hF3Og=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLCwe-62bZhn-98461a49da2aae2f
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Now in 75001, FR?' took 0.75s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'FR', 'lang': 'en', 'units': 'metric', 'zip': '75001'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e081b712-f2b0-41c0-81cf-cef45ef110ee', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current weather for 1250-096, PT (Lisboa)?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E467670>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E466EC0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:19 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLEgA-62bZhn-98461a6e3f3b8790'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461a6e3f3b8790-IAD'), (b'etag', b'W/"377-u+Q/Inj6XveRA1gCUkQ//NbkHIk"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:19.427Z'), (b'x-api-call-start', b'2025-09-24T23:36:18.979Z'), (b'x-api-received', b'2025-09-24T23:36:18.971Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'bxgTQ2sX2xi4hboNEpvwDz1c4NNljgx2ntmqG9HFcw_iM8qByWWLFQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:19 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLEgA-62bZhn-98461a6e3f3b8790', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461a6e3f3b8790-IAD', 'etag': 'W/"377-u+Q/Inj6XveRA1gCUkQ//NbkHIk"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:19.427Z', 'x-api-call-start': '2025-09-24T23:36:18.979Z', 'x-api-received': '2025-09-24T23:36:18.971Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'bxgTQ2sX2xi4hboNEpvwDz1c4NNljgx2ntmqG9HFcw_iM8qByWWLFQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLEgA-62bZhn-98461a6e3f3b8790
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Current weather for 1250-096, PT (Lisboa)?' took 0.79s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'PT', 'lang': 'en', 'units': 'metric', 'zip': '1250-096'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4b970d1a-8e57-44e3-8f4d-c0c04973202c', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's it now at 2000, AU (Sydney CBD)?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4CC1C0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E49BD60>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:25 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLGQ6-62bZhn-98461a924892057e'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461a924892057e-IAD'), (b'etag', b'W/"38e-KTjOP3dzdp/0KIlI1wjMEBctgic"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:25.299Z'), (b'x-api-call-start', b'2025-09-24T23:36:24.776Z'), (b'x-api-received', b'2025-09-24T23:36:24.767Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 42c937f806e6e43029a719b83b9a8612.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'7th4B4n3kaEOAB3Dc1_KloTqNVHl7m54xW1NwnuiSX1Q696q8zMP4w==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:25 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLGQ6-62bZhn-98461a924892057e', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461a924892057e-IAD', 'etag': 'W/"38e-KTjOP3dzdp/0KIlI1wjMEBctgic"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:25.299Z', 'x-api-call-start': '2025-09-24T23:36:24.776Z', 'x-api-received': '2025-09-24T23:36:24.767Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 42c937f806e6e43029a719b83b9a8612.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '7th4B4n3kaEOAB3Dc1_KloTqNVHl7m54xW1NwnuiSX1Q696q8zMP4w=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLGQ6-62bZhn-98461a924892057e
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'What's it now at 2000, AU (Sydney CBD)?' took 1.03s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Sydney', 'country_code': 'AU', 'lang': 'en', 'state_code': 'NSW', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-79a4a9b3-4998-4e26-ba50-f16097a89d70', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Weather rn at 01000-000, BR (SÃ£o Paulo).'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4CDF60>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4CDB40>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:31 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLJMY-3NKUce-98461ab81b2f5774'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461ab81b2f5774-IAD'), (b'etag', b'W/"378-ORoZ0rHl3M/nmMEstFZuyZgx/hM"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:31.773Z'), (b'x-api-call-start', b'2025-09-24T23:36:31.358Z'), (b'x-api-received', b'2025-09-24T23:36:31.348Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'dNXMzcxWQcAlG1JPN-QO3TtWiTbHcout0k5XgnqaMJAloMfSp5xaYw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:31 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLJMY-3NKUce-98461ab81b2f5774', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461ab81b2f5774-IAD', 'etag': 'W/"378-ORoZ0rHl3M/nmMEstFZuyZgx/hM"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:31.773Z', 'x-api-call-start': '2025-09-24T23:36:31.358Z', 'x-api-received': '2025-09-24T23:36:31.348Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 347b4531a9eb19c96c462a85600ac33a.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'dNXMzcxWQcAlG1JPN-QO3TtWiTbHcout0k5XgnqaMJAloMfSp5xaYw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLJMY-3NKUce-98461ab81b2f5774
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Weather rn at 01000-000, BR (SÃ£o Paulo).' took 0.73s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'BR', 'lang': 'en', 'units': 'metric', 'zip': '01000-000'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3dbe2784-2ea9-46df-a6a4-48e590ddd3f7', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current conditions for 110001, IN (New Delhi).'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E49BE50>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E498C40>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:37 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLKtt-62bZhn-98461adbf8483b11'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461adbf8483b11-IAD'), (b'etag', b'W/"376-1zvXzYwX+dRRyj1eS901WQKysxA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:37.095Z'), (b'x-api-call-start', b'2025-09-24T23:36:36.538Z'), (b'x-api-received', b'2025-09-24T23:36:36.529Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 e78b88048cb2f0beb893089a9fa30352.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'vCyvPy0f8WccAJGObBKddajkhAADKgp9DvSQ3x6qrsQwWpdyv9CYEw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:37 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLKtt-62bZhn-98461adbf8483b11', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461adbf8483b11-IAD', 'etag': 'W/"376-1zvXzYwX+dRRyj1eS901WQKysxA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:37.095Z', 'x-api-call-start': '2025-09-24T23:36:36.538Z', 'x-api-received': '2025-09-24T23:36:36.529Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 e78b88048cb2f0beb893089a9fa30352.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'vCyvPy0f8WccAJGObBKddajkhAADKgp9DvSQ3x6qrsQwWpdyv9CYEw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLKtt-62bZhn-98461adbf8483b11
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Current conditions for 110001, IN (New Delhi).' took 0.87s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'country_code': 'IN', 'lang': 'en', 'units': 'metric', 'zip': '110001'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a60a2295-3fea-4740-ac7f-afdea8907577', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's the weather in Kyoto, JP right now?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4CF190>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4CCFA0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:42 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLMeL-62bZhn-98461b00baa7d6b9'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461b00baa7d6b9-IAD'), (b'etag', b'W/"361-CoGmVctqqcEk3zVIDSY+6Jmknlg"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:42.872Z'), (b'x-api-call-start', b'2025-09-24T23:36:42.422Z'), (b'x-api-received', b'2025-09-24T23:36:42.414Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 e78b88048cb2f0beb893089a9fa30352.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'G_HhlvgrW8jaqlMdpVg8h-FxnGuY6cyD6OlZit7U8RM11dBEgWeegg==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:42 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLMeL-62bZhn-98461b00baa7d6b9', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461b00baa7d6b9-IAD', 'etag': 'W/"361-CoGmVctqqcEk3zVIDSY+6Jmknlg"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:42.872Z', 'x-api-call-start': '2025-09-24T23:36:42.422Z', 'x-api-received': '2025-09-24T23:36:42.414Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 e78b88048cb2f0beb893089a9fa30352.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'G_HhlvgrW8jaqlMdpVg8h-FxnGuY6cyD6OlZit7U8RM11dBEgWeegg=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLMeL-62bZhn-98461b00baa7d6b9
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'What's the weather in Kyoto, JP right now?' took 0.77s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Kyoto', 'country_code': 'JP', 'lang': 'en'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-e81d208c-aadd-4115-840d-f31c6a04383d', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current conditions in Toronto, CA?'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4F4F40>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4F4B20>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:48 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLPWx-3NKUce-98461b24df35209a'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461b24df35209a-IAD'), (b'etag', b'W/"38d-lbsPVv8/Qv443Wk8sotvnjnD1T0"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:49.264Z'), (b'x-api-call-start', b'2025-09-24T23:36:48.724Z'), (b'x-api-received', b'2025-09-24T23:36:48.713Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'-dWmieegJt59_qeGv2p2Jk9Bt9Tp0fervPTTKvCvA-Yfx4qujLQ9ug==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:48 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLPWx-3NKUce-98461b24df35209a', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461b24df35209a-IAD', 'etag': 'W/"38d-lbsPVv8/Qv443Wk8sotvnjnD1T0"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:49.264Z', 'x-api-call-start': '2025-09-24T23:36:48.724Z', 'x-api-received': '2025-09-24T23:36:48.713Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '-dWmieegJt59_qeGv2p2Jk9Bt9Tp0fervPTTKvCvA-Yfx4qujLQ9ug=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLPWx-3NKUce-98461b24df35209a
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Current conditions in Toronto, CA?' took 0.85s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Toronto', 'country_code': 'CA', 'lang': 'en', 'state_code': 'ON', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-3a267f0e-0c81-4581-a8ac-6070f93a3fd0', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "How's Nairobi today?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:36:54 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLRFn-3NKUce-98461b495b254d20'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461b495b254d20-IAD'), (b'etag', b'W/"377-FFViwTI44RNbOdo7Pb6JErmLBeg"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:36:55.068Z'), (b'x-api-call-start', b'2025-09-24T23:36:54.571Z'), (b'x-api-received', b'2025-09-24T23:36:54.561Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'kFglzfYVbe6Qihy8eTG5oNJDhL1bpo_Nv92V9MfLnDVleRpvFWTjew==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:36:54 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLRFn-3NKUce-98461b495b254d20', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461b495b254d20-IAD', 'etag': 'W/"377-FFViwTI44RNbOdo7Pb6JErmLBeg"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:36:55.068Z', 'x-api-call-start': '2025-09-24T23:36:54.571Z', 'x-api-received': '2025-09-24T23:36:54.561Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 daf51694fe4a175a7249d39be5e22e4c.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'kFglzfYVbe6Qihy8eTG5oNJDhL1bpo_Nv92V9MfLnDVleRpvFWTjew=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLRFn-3NKUce-98461b495b254d20
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'How's Nairobi today?' took 0.87s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Nairobi', 'country_code': 'KE', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-c413ecc4-b3e8-4a38-99b9-2eaade099698', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Weather now in Auckland, NZ.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4F53C0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4F5C30>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:37:00 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLSs5-66dFFu-98461b6e89151216'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461b6e89151216-IAD'), (b'etag', b'W/"363-x06a9nYtPRac27OOZRLIVieL71U"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:37:00.486Z'), (b'x-api-call-start', b'2025-09-24T23:36:59.982Z'), (b'x-api-received', b'2025-09-24T23:36:59.972Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'YSiJHgwB3kKi9h2fMHDPPXxkFtMzYiaDohGZiQ3Yp3laCX6XZMHOIQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:37:00 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLSs5-66dFFu-98461b6e89151216', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461b6e89151216-IAD', 'etag': 'W/"363-x06a9nYtPRac27OOZRLIVieL71U"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:37:00.486Z', 'x-api-call-start': '2025-09-24T23:36:59.982Z', 'x-api-received': '2025-09-24T23:36:59.972Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 9bc25d3cccecc51547f094bc2aa70ef4.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'YSiJHgwB3kKi9h2fMHDPPXxkFtMzYiaDohGZiQ3Yp3laCX6XZMHOIQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLSs5-66dFFu-98461b6e89151216
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Weather now in Auckland, NZ.' took 0.84s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Auckland', 'country_code': 'NZ', 'lang': 'en'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-1850c293-578f-4ab9-8083-36ed9de60c13', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's it like in Reykyavik, IS?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4F7AF0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4F76D0>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:37:06 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLUbV-66dFFu-98461b92ec3e059e'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461b92ec3e059e-IAD'), (b'etag', b'W/"354-q1RdzLC0ws3p2bq3jsZa+12F6Js"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:37:06.217Z'), (b'x-api-call-start', b'2025-09-24T23:37:05.806Z'), (b'x-api-received', b'2025-09-24T23:37:05.796Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 735dd7fa3c296627cd805d04e3e3a3e8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'v-4sfk_2JWWZNGuhEp4MGkmCGTcg72IMQQ-bq23wTLrKIfSeN-x2vQ==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:37:06 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLUbV-66dFFu-98461b92ec3e059e', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461b92ec3e059e-IAD', 'etag': 'W/"354-q1RdzLC0ws3p2bq3jsZa+12F6Js"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:37:06.217Z', 'x-api-call-start': '2025-09-24T23:37:05.806Z', 'x-api-received': '2025-09-24T23:37:05.796Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 735dd7fa3c296627cd805d04e3e3a3e8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'v-4sfk_2JWWZNGuhEp4MGkmCGTcg72IMQQ-bq23wTLrKIfSeN-x2vQ=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLUbV-66dFFu-98461b92ec3e059e
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'What's it like in Reykyavik, IS?' took 0.72s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Reykyavik', 'country_code': 'IS'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-a7c9fad2-a451-41aa-949b-2a3735b31544', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current weather for Lima, PE.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4CF6D0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E4CDE40>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:37:12 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLWQR-3NKUce-98461bb6bf913885'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461bb6bf913885-IAD'), (b'etag', b'W/"34f-hTgTQkbo5vhIlTB7rIMJX9WMH0s"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:37:12.337Z'), (b'x-api-call-start', b'2025-09-24T23:37:11.894Z'), (b'x-api-received', b'2025-09-24T23:37:11.883Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5d25c31f47a198dbf50acf297a389a00.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'mP0ki3VwlBF9LoFITFGUZ7rJ3o2cu_nIa18RiAk6rIubKpv8Po6x3A==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:37:12 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLWQR-3NKUce-98461bb6bf913885', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461bb6bf913885-IAD', 'etag': 'W/"34f-hTgTQkbo5vhIlTB7rIMJX9WMH0s"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:37:12.337Z', 'x-api-call-start': '2025-09-24T23:37:11.894Z', 'x-api-received': '2025-09-24T23:37:11.883Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5d25c31f47a198dbf50acf297a389a00.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'mP0ki3VwlBF9LoFITFGUZ7rJ3o2cu_nIa18RiAk6rIubKpv8Po6x3A=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLWQR-3NKUce-98461bb6bf913885
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Current weather for Lima, PE.' took 0.74s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Lima', 'country_code': 'PE'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-38dd7e82-1c35-4fce-b13a-bca39bb13c80', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "How's Jo'burg (Johannesburg, ZA) right now?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:37:17 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLXzF-66dFFu-98461bda2bae1ffd'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461bda2bae1ffd-IAD'), (b'etag', b'W/"37c-sK+dGXXADWctssPrOOpGc1P96sA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:37:17.683Z'), (b'x-api-call-start', b'2025-09-24T23:37:17.218Z'), (b'x-api-received', b'2025-09-24T23:37:17.209Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 5d25c31f47a198dbf50acf297a389a00.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'8xydMUZjUcL_NO3-25imiEO9hmxX2-2MwHeHiZgEV0Ern5UDgiKn1w==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:37:17 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLXzF-66dFFu-98461bda2bae1ffd', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461bda2bae1ffd-IAD', 'etag': 'W/"37c-sK+dGXXADWctssPrOOpGc1P96sA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:37:17.683Z', 'x-api-call-start': '2025-09-24T23:37:17.218Z', 'x-api-received': '2025-09-24T23:37:17.209Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 5d25c31f47a198dbf50acf297a389a00.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': '8xydMUZjUcL_NO3-25imiEO9hmxX2-2MwHeHiZgEV0Ern5UDgiKn1w=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLXzF-66dFFu-98461bda2bae1ffd
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'How's Jo'burg (Johannesburg, ZA) right now?' took 0.72s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Johannesburg', 'country_code': 'ZA', 'lang': 'en', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-48850931-e2f0-4ac4-9808-9e73e975f37f', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Weather in Munich, DE (now).'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E521C60>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E521840>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:37:23 GMT'), (b'x-ratelimit-remaining-tokens', b'21961'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLZhz-62bZhn-98461bfe59d8206a'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461bfe59d8206a-IAD'), (b'etag', b'W/"360-Mqt4BFtdC6/8NPJDKgrgo4Wv6iM"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:37:23.528Z'), (b'x-api-call-start', b'2025-09-24T23:37:23.007Z'), (b'x-api-received', b'2025-09-24T23:37:22.993Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 8b0fd9a74745a3290a9c7ffef7d75076.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'HNzBB4zcXxsZvZz9kYqLV7ePGblyXnzYm_0PLzr-2PfhTSASsLEBEw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:37:23 GMT', 'x-ratelimit-remaining-tokens': '21961', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLZhz-62bZhn-98461bfe59d8206a', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461bfe59d8206a-IAD', 'etag': 'W/"360-Mqt4BFtdC6/8NPJDKgrgo4Wv6iM"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:37:23.528Z', 'x-api-call-start': '2025-09-24T23:37:23.007Z', 'x-api-received': '2025-09-24T23:37:22.993Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 8b0fd9a74745a3290a9c7ffef7d75076.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'HNzBB4zcXxsZvZz9kYqLV7ePGblyXnzYm_0PLzr-2PfhTSASsLEBEw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLZhz-62bZhn-98461bfe59d8206a
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Weather in Munich, DE (now).' took 0.83s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Munich', 'country_code': 'DE', 'lang': 'en'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-ad1fc3df-c26a-4bd3-8648-b47651860902', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': 'Current conditions San Francisco, US-CA.'}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.connection:_trace.py:47 close.started
DEBUG    httpcore.connection:_trace.py:47 close.complete
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.started host='router.huggingface.co' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG    httpcore.connection:_trace.py:47 connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E49BFA0>
DEBUG    httpcore.connection:_trace.py:47 start_tls.started ssl_context=<ssl.SSLContext object at 0x000002822C9CFEC0> server_hostname='router.huggingface.co' timeout=5.0
DEBUG    httpcore.connection:_trace.py:47 start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002822E397D60>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:37:29 GMT'), (b'x-ratelimit-remaining-tokens', b'1291'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLbYd-3NKUce-98461c22eba33b89'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461c22eba33b89-IAD'), (b'etag', b'W/"393-naEyTqhQFUP93kOaMQYJpxR30v8"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:37:29.742Z'), (b'x-api-call-start', b'2025-09-24T23:37:29.191Z'), (b'x-api-received', b'2025-09-24T23:37:29.179Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'Q0y58K-4aS42OQwafevpTV-DnRPWS-ddMkAVW1XbQT0OwADs6ZSqLw==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:37:29 GMT', 'x-ratelimit-remaining-tokens': '1291', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLbYd-3NKUce-98461c22eba33b89', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461c22eba33b89-IAD', 'etag': 'W/"393-naEyTqhQFUP93kOaMQYJpxR30v8"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:37:29.742Z', 'x-api-call-start': '2025-09-24T23:37:29.191Z', 'x-api-received': '2025-09-24T23:37:29.179Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'Q0y58K-4aS42OQwafevpTV-DnRPWS-ddMkAVW1XbQT0OwADs6ZSqLw=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLbYd-3NKUce-98461c22eba33b89
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'Current conditions San Francisco, US-CA.' took 0.87s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'San Francisco', 'country_code': 'US', 'lang': 'en', 'state_code': 'CA', 'units': 'metric'})


DEBUG    openai._base_client:_base_client.py:482 Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'idempotency_key': 'stainless-python-retry-4626e862-72d3-45b2-b54f-39735b6e1aba', 'json_data': {'messages': [{'role': 'system', 'content': "You are a digital assistant that can call predefined functions when they match the user's request.\n\nYou shouldn't talk about functions or tools unless the user specifically asks about them. You shouldn't also tell the user to execute the functions, for they are internal to the system.\n\nNever reflect on how you should have responded unless told otherwise. Focus on answering the userâ€™s latest question or request clearly and helpfully, using the information you already provided if relevant."}, {'role': 'user', 'content': "What's the weather in Porto, PT?"}], 'model': 'Qwen/Qwen2.5-7B-Instruct', 'temperature': 0.7, 'tool_choice': 'auto', 'tools': [{'type': 'function', 'function': {'name': 'meteorology_get_current_weather', 'description': 'Get the current weather for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_forecast', 'description': 'Get a 5-day forecast in 3-hour intervals.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'meteorology_get_air_pollution', 'description': 'Get current air pollution data for a location.', 'parameters': {'oneOf': [{'type': 'object', 'properties': {'city': {'type': 'string', 'description': 'City name.'}, 'state_code': {'type': 'string', 'description': 'State code. Only for USA.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['city']}, {'type': 'object', 'properties': {'lat': {'type': 'number', 'description': 'Latitude. Goes from -90 to 90.'}, 'lon': {'type': 'number', 'description': 'Longitude. Goes from -180 to 180.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['lat', 'lon']}, {'type': 'object', 'properties': {'zip': {'type': 'string', 'description': 'Postal code.'}, 'country_code': {'type': 'string', 'description': 'Country code. Follows ISO 3166.'}, 'units': {'type': 'string', 'description': 'Temperature unit.', 'enum': ['standard', 'metric', 'imperial']}, 'lang': {'type': 'string', 'description': "Language code for weather description (e.g. 'en')"}}, 'required': ['zip', 'country_code']}]}}}, {'type': 'function', 'function': {'name': 'os_launch_application', 'description': 'Launches an application by its name in the system, if it has a shortcut in the Start Menu.', 'parameters': {'type': 'object', 'properties': {'app_name': {'type': 'string', 'description': 'The name of the application to launch.'}, 'is_sure_after_multiple_matches': {'type': 'boolean', 'description': 'Indicates if the user confirmed which application to launch when multiple matches were found before in the conversation.', 'default': False}}, 'required': ['app_name', 'is_sure_after_multiple_matches']}}}], 'top_p': 0.9}}
DEBUG    openai._base_client:_base_client.py:978 Sending HTTP Request: POST https://router.huggingface.co/v1/chat/completions
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_headers.complete
DEBUG    httpcore.http11:_trace.py:47 send_request_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 send_request_body.complete
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Date', b'Wed, 24 Sep 2025 23:37:35 GMT'), (b'x-ratelimit-remaining-tokens', b'33333'), (b'x-ratelimit-reset', b'2'), (b'X-Powered-By', b'huggingface-moon'), (b'vary', b'Accept-Encoding'), (b'access-control-allow-origin', b'*'), (b'Access-Control-Expose-Headers', b'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash'), (b'X-Robots-Tag', b'none'), (b'cross-origin-opener-policy', b'same-origin'), (b'Referrer-Policy', b'strict-origin-when-cross-origin'), (b'x-request-id', b'oCaLdBD-66dFFu-98461c47589012fc'), (b'x-inference-provider', b'together'), (b'cf-cache-status', b'DYNAMIC'), (b'cf-ray', b'98461c47589012fc-IAD'), (b'etag', b'W/"350-CRI2AmUMUrUGo0q+xZA5kAZV+CA"'), (b'retry-after', b'2'), (b'server', b'cloudflare'), (b'strict-transport-security', b'max-age=15552000; includeSubDomains'), (b'x-api-call-end', b'2025-09-24T23:37:35.056Z'), (b'x-api-call-start', b'2025-09-24T23:37:34.675Z'), (b'x-api-received', b'2025-09-24T23:37:34.665Z'), (b'x-inference-version', b'v2'), (b'x-ratelimit', b'false'), (b'x-ratelimit-limit', b'100'), (b'x-ratelimit-limit-tokens', b'33333'), (b'x-ratelimit-remaining', b'199'), (b'X-Cache', b'Miss from cloudfront'), (b'Via', b'1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)'), (b'X-Amz-Cf-Pop', b'LIS50-P1'), (b'X-Amz-Cf-Id', b'zE-VXd6IJSTZ5_LQQ26z0ti1EdsK-ST_qxxifsONRcaY2oulDTI2GA==')])
INFO     httpx:_client.py:1025 HTTP Request: POST https://router.huggingface.co/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.started request=<Request [b'POST']>
DEBUG    httpcore.http11:_trace.py:47 receive_response_body.complete
DEBUG    httpcore.http11:_trace.py:47 response_closed.started
DEBUG    httpcore.http11:_trace.py:47 response_closed.complete
DEBUG    openai._base_client:_base_client.py:1016 HTTP Response: POST https://router.huggingface.co/v1/chat/completions "200 OK" Headers({'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'date': 'Wed, 24 Sep 2025 23:37:35 GMT', 'x-ratelimit-remaining-tokens': '33333', 'x-ratelimit-reset': '2', 'x-powered-by': 'huggingface-moon', 'vary': 'Accept-Encoding', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Repo-Commit,X-Request-Id,X-Error-Code,X-Error-Message,X-Total-Count,ETag,Link,Accept-Ranges,Content-Range,X-Linked-Size,X-Linked-ETag,X-Xet-Hash', 'x-robots-tag': 'none', 'cross-origin-opener-policy': 'same-origin', 'referrer-policy': 'strict-origin-when-cross-origin', 'x-request-id': 'oCaLdBD-66dFFu-98461c47589012fc', 'x-inference-provider': 'together', 'cf-cache-status': 'DYNAMIC', 'cf-ray': '98461c47589012fc-IAD', 'etag': 'W/"350-CRI2AmUMUrUGo0q+xZA5kAZV+CA"', 'retry-after': '2', 'server': 'cloudflare', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-api-call-end': '2025-09-24T23:37:35.056Z', 'x-api-call-start': '2025-09-24T23:37:34.675Z', 'x-api-received': '2025-09-24T23:37:34.665Z', 'x-inference-version': 'v2', 'x-ratelimit': 'false', 'x-ratelimit-limit': '100', 'x-ratelimit-limit-tokens': '33333', 'x-ratelimit-remaining': '199', 'x-cache': 'Miss from cloudfront', 'via': '1.1 923c2d2f00d1c4aa09564e5db1f3c7a8.cloudfront.net (CloudFront)', 'x-amz-cf-pop': 'LIS50-P1', 'x-amz-cf-id': 'zE-VXd6IJSTZ5_LQQ26z0ti1EdsK-ST_qxxifsONRcaY2oulDTI2GA=='})
DEBUG    openai._base_client:_base_client.py:1024 request_id: oCaLdBD-66dFFu-98461c47589012fc
DEBUG    test_performance:test_performance.py:366 Current weather conversation 'What's the weather in Porto, PT?' took 0.63s with response: 
LLMResponse(type='function_call', content=None, function='get_current_weather', module='meteorology', arguments={'city': 'Porto', 'country_code': 'PT'})


