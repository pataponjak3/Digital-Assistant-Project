# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'assistant_interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets


class AssistantGUI(object):
    def __init__(self, module_loader):
        super().__init__()
        self.module_loader = module_loader
        self.recognizer = self.module_loader.load_module("sr")
        self.synthesizer = self.module_loader.load_module("ss")
        self.intent_recognizer = self.module_loader.load_module("nlp")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #Chat display area
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(0, 20, 801, 521))
        self.textBrowser.setObjectName("textBrowser")
        #Text area
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(0, 540, 721, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.returnPressed.connect(self.send_text_message)
        #Send text button
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(720, 540, 41, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.send_text_message)
        #Speak button
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(760, 540, 41, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.send_voice_message)
        #Checkbox for enabling speech output
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(0, 0, 131, 17))
        self.checkBox.setObjectName("checkBox")
        MainWindow.setCentralWidget(self.centralwidget)
        #Menu bar for settings
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionMicrophone_Settings = QtWidgets.QAction(MainWindow)
        self.actionMicrophone_Settings.setObjectName("actionMicrophone_Settings")
        self.menuSettings.addAction(self.actionMicrophone_Settings)
        self.menubar.addAction(self.menuSettings.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Digital Assistant"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Type your message here..."))
        self.pushButton.setText(_translate("MainWindow", "Send"))
        self.pushButton_2.setText(_translate("MainWindow", "Speak"))
        self.checkBox.setText(_translate("MainWindow", "Enable Speech Output"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.actionMicrophone_Settings.setText(_translate("MainWindow", "Microphone Settings"))

    def send_text_message(self):
        user_text = self.lineEdit.text().strip()
        self.send_message(user_text)


    def send_voice_message(self):
        spoken_text = self.recognizer.recognize_speech()
        self.send_message(spoken_text)

    def send_message(self, user_message):
        if user_message:
            self.update_chat(f"User -> {user_message}")
            self.lineEdit.clear()
            self.update_chat(f"DA -> You said '{user_message}'")
            self.say_text(f"User said: {user_message}")
            intent_data = self.intent_recognizer.recognize_intent(user_message)
            if intent_data:
                intent_str = f"Intent: {intent_data['intent']} | Value: {intent_data['value']}"
                self.update_chat(f"DA -> {intent_str}")
                self.say_text(f"This is the intent: {intent_data['intent']} with value: {intent_data['value']}")
            else:
                self.update_chat("DA -> Intent was not recognized")
                self.say_text("I could not recognize your intent")
    
    def update_chat(self, message):
        self.textBrowser.append(message)

    def say_text(self, text):
        if self.checkBox.isChecked():
            self.synthesizer.synthesize_speech(text)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = AssistantGUI()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
